{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Home.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createAsks, resetAsks, savePlayer } from '../actions';\nimport { createRanking } from '../services/localStorage';\nimport { getGravatar } from '../services/serviceAPI';\nimport { Toast } from '../components/Toast';\nimport '../styles/home.css';\nimport { BsFillTrophyFill, BsPlayFill } from 'react-icons/bs';\nimport { IoMdSettings } from 'react-icons/io';\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.goFor = pageName => {\n      this.props.history.push(`/${pageName}`);\n    };\n\n    this.handleClickPlay = async () => {\n      const {\n        username,\n        email\n      } = this.state;\n      const {\n        savePlayer,\n        createAsks,\n        settings\n      } = this.props;\n\n      if (!username || !email) {\n        this.setState({\n          isShowToast: true\n        });\n        setTimeout(() => this.setState({\n          isShowToast: false\n        }), 10000);\n      } else {\n        createAsks(settings);\n        getGravatar(email).then(response => {\n          const player = {\n            name: username,\n            email: email,\n            assertions: 0,\n            score: 0,\n            gravatarEmail: response\n          };\n          localStorage.setItem('@TriviaGame:player', JSON.stringify(player));\n          savePlayer(player);\n        });\n        createRanking();\n        this.goFor('play');\n      }\n    };\n\n    this.state = {\n      username: '',\n      email: '',\n      isShowToast: false\n    };\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.handleClickPlay = this.handleClickPlay.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      clearAsks\n    } = this.props;\n    localStorage.setItem('@TriviaGame:player', JSON.stringify({}));\n    clearAsks();\n  }\n\n  handleChangeText(_ref) {\n    let {\n      target\n    } = _ref;\n    const {\n      name,\n      value\n    } = target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  renderForm() {\n    const {\n      username,\n      email\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form-login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      style: {\n        color: 'white',\n        fontSize: '1.4rem',\n        fontWeight: '500'\n      },\n      htmlFor: \"player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"Player Name\"), /*#__PURE__*/React.createElement(Input, {\n      autoFocus: true,\n      placeHolder: \"Insert nickName\",\n      textSize: \"1.4rem\",\n      type: \"text\",\n      name: \"username\",\n      value: username,\n      onChange: this.handleChangeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"margin-horizontal-30\",\n      style: {\n        color: 'white',\n        fontSize: '1.4rem',\n        fontWeight: '500'\n      },\n      htmlFor: \"gravatar-email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \"Gravatar E-mail\"), /*#__PURE__*/React.createElement(Input, {\n      placeHolder: \"Insert your email\",\n      type: \"text\",\n      textSize: \"1.4rem\",\n      name: \"email\",\n      value: email,\n      onChange: this.handleChangeText,\n      width: \"30rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      icon: /*#__PURE__*/React.createElement(BsPlayFill, {\n        size: \"2rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }),\n      iconEnd: true,\n      title: \"Play\",\n      textColor: \"white\",\n      textSize: \"1.6rem\",\n      textWeight: \"600\",\n      type: \"button\",\n      withBorder: true,\n      onClick: this.handleClickPlay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    const {\n      isShowToast\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, isShowToast && /*#__PURE__*/React.createElement(Toast, {\n      type: \"error\",\n      title: \"Ops, PlayerName or email invalid !\",\n      description: \"Correcty e try again.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, this.renderForm(), /*#__PURE__*/React.createElement(Button, {\n      icon: /*#__PURE__*/React.createElement(BsFillTrophyFill, {\n        size: \"1.4rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 19\n        }\n      }),\n      title: \"Ranking\",\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: () => this.goFor('ranking'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      icon: /*#__PURE__*/React.createElement(IoMdSettings, {\n        size: \"1.8rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 19\n        }\n      }),\n      title: \"Settings\",\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: () => this.goFor('settings'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"message-home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, \"Test your knowledge\"), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"title-home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, \"GAME\"));\n  }\n\n}\n\nHome.propTypes = {\n  createAsks: PropTypes.func.isRequired,\n  clearAsks: PropTypes.func.isRequired,\n  settings: PropTypes.objectOf().isRequired,\n  savePlayer: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings\n});\n\nconst mapDispatchToProps = dispatch => ({\n  savePlayer: player => dispatch(savePlayer(player)),\n  clearAsks: () => dispatch(resetAsks()),\n  createAsks: settings => dispatch(createAsks(settings))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Home.js"],"names":["React","PropTypes","connect","createAsks","resetAsks","savePlayer","createRanking","getGravatar","Toast","BsFillTrophyFill","BsPlayFill","IoMdSettings","Button","Input","Home","Component","constructor","props","goFor","pageName","history","push","handleClickPlay","username","email","state","settings","setState","isShowToast","setTimeout","then","response","player","name","assertions","score","gravatarEmail","localStorage","setItem","JSON","stringify","handleChangeText","bind","componentDidMount","clearAsks","target","value","renderForm","color","fontSize","fontWeight","render","propTypes","func","isRequired","objectOf","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createAsks, resetAsks, savePlayer } from '../actions';\nimport { createRanking } from '../services/localStorage';\nimport { getGravatar } from '../services/serviceAPI';\nimport { Toast } from '../components/Toast';\nimport '../styles/home.css';\n\nimport { BsFillTrophyFill, BsPlayFill } from 'react-icons/bs';\nimport { IoMdSettings } from 'react-icons/io';\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      isShowToast: false,\n    };\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.handleClickPlay = this.handleClickPlay.bind(this);\n  }\n\n  componentDidMount() {\n    const { clearAsks } = this.props;\n    localStorage.setItem('@TriviaGame:player', JSON.stringify({}));\n    clearAsks();\n  }\n\n  goFor = (pageName) => {\n    this.props.history.push(`/${pageName}`);\n  };\n\n  handleChangeText({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClickPlay = async () => {\n    const { username, email } = this.state;\n    const { savePlayer, createAsks, settings } = this.props;\n\n    if (!username || !email) {\n      this.setState({ isShowToast: true });\n      setTimeout(() => this.setState({ isShowToast: false }), 10000);\n    } else {\n      createAsks(settings);\n      getGravatar(email).then((response) => {\n        const player = {\n          name: username,\n          email: email,\n          assertions: 0,\n          score: 0,\n          gravatarEmail: response,\n        };\n        localStorage.setItem('@TriviaGame:player', JSON.stringify(player));\n        savePlayer(player);\n      });\n\n      createRanking();\n      this.goFor('play');\n    }\n  };\n\n  renderForm() {\n    const { username, email } = this.state;\n\n    return (\n      <form className=\"form-login\">\n        <label\n          style={{ color: 'white', fontSize: '1.4rem', fontWeight: '500' }}\n          htmlFor=\"player-name\"\n        >\n          Player Name\n        </label>\n        <Input\n          autoFocus\n          placeHolder=\"Insert nickName\"\n          textSize=\"1.4rem\"\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          onChange={this.handleChangeText}\n        />\n        <label\n          className=\"margin-horizontal-30\"\n          style={{ color: 'white', fontSize: '1.4rem', fontWeight: '500' }}\n          htmlFor=\"gravatar-email\"\n        >\n          Gravatar E-mail\n        </label>\n        <Input\n          placeHolder=\"Insert your email\"\n          type=\"text\"\n          textSize=\"1.4rem\"\n          name=\"email\"\n          value={email}\n          onChange={this.handleChangeText}\n          width=\"30rem\"\n        />\n        <Button\n          icon={<BsPlayFill size=\"2rem\" />}\n          iconEnd\n          title=\"Play\"\n          textColor=\"white\"\n          textSize=\"1.6rem\"\n          textWeight=\"600\"\n          type=\"button\"\n          withBorder\n          onClick={this.handleClickPlay}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { isShowToast } = this.state;\n\n    return (\n      <div className=\"container-main\">\n        {isShowToast && (\n          <Toast\n            type=\"error\"\n            title=\"Ops, PlayerName or email invalid !\"\n            description=\"Correcty e try again.\"\n          />\n        )}\n        <div className=\"container-top\">\n          {this.renderForm()}\n          <Button\n            icon={<BsFillTrophyFill size=\"1.4rem\" />}\n            title=\"Ranking\"\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={() => this.goFor('ranking')}\n          />\n          <Button\n            icon={<IoMdSettings size=\"1.8rem\" />}\n            title=\"Settings\"\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={() => this.goFor('settings')}\n          />\n        </div>\n        <p className=\"message-home\">Test your knowledge</p>\n        <h1 className=\"title-home\">GAME</h1>\n      </div>\n    );\n  }\n}\n\nHome.propTypes = {\n  createAsks: PropTypes.func.isRequired,\n  clearAsks: PropTypes.func.isRequired,\n  settings: PropTypes.objectOf().isRequired,\n  savePlayer: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  savePlayer: (player) => dispatch(savePlayer(player)),\n  clearAsks: () => dispatch(resetAsks()),\n  createAsks: (settings) => dispatch(createAsks(settings)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n"]},"metadata":{},"sourceType":"module"}