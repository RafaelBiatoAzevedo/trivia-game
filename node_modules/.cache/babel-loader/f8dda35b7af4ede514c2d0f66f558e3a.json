{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Home.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { asyncToken, loginAction } from '../actions';\nimport { createRanking } from '../services/localStorage';\nimport { getGravatar } from '../serviceAPI';\nimport '../styles/home.css';\nimport { BsFillTrophyFill, BsPlayFill } from 'react-icons/bs';\nimport { IoMdSettings } from 'react-icons/io';\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.goFor = pageName => {\n      this.props.history.push(`/${pageName}`);\n    };\n\n    this.state = {\n      username: '',\n      email: ''\n    };\n    this.handleChangeText = this.handleChangeText.bind(this);\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  handleChangeText(_ref) {\n    let {\n      target\n    } = _ref;\n    const {\n      name,\n      value\n    } = target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClickPlay() {\n    const {\n      username,\n      email\n    } = this.state;\n    const {\n      loginActionFunc,\n      saveToken,\n      settings\n    } = this.props;\n    saveToken(settings);\n    loginActionFunc(username, email);\n    getGravatar(email).then(response => {\n      const player = {\n        player: {\n          name: username,\n          assertions: 0,\n          score: 0,\n          gravatarEmail: response.url\n        }\n      };\n      localStorage.setItem('state', JSON.stringify(player));\n    });\n    createRanking();\n    this.goFor('play');\n  }\n\n  renderForm() {\n    const {\n      username,\n      email\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form-login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      style: {\n        color: 'white',\n        fontSize: '1.4rem'\n      },\n      htmlFor: \"player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, \"Player Name\", /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"username\",\n      value: username,\n      onChange: this.handleChangeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      style: {\n        color: 'white',\n        fontSize: '1.4rem',\n        margin: '0 10px'\n      },\n      htmlFor: \"gravatar-email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"Gravatar E-mail\", /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"email\",\n      value: email,\n      onChange: this.handleChangeText,\n      width: \"30rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      icon: /*#__PURE__*/React.createElement(BsPlayFill, {\n        color: \"white\",\n        size: \"2rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }),\n      iconEnd: true,\n      title: \"Play\",\n      textColor: \"white\",\n      textSize: \"1.6rem\",\n      type: \"submit\",\n      withBorder: true,\n      onClick: () => this.handleClickPlay(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, this.renderForm(), /*#__PURE__*/React.createElement(Button, {\n      icon: /*#__PURE__*/React.createElement(BsFillTrophyFill, {\n        color: \"white\",\n        size: \"1.6rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }\n      }),\n      title: \"Ranking\",\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: () => this.goFor('ranking'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      icon: /*#__PURE__*/React.createElement(IoMdSettings, {\n        color: \"white\",\n        size: \"1.8rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 19\n        }\n      }),\n      title: \"Settings\",\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: () => this.goFor('settings'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nHome.propTypes = {\n  saveToken: PropTypes.func.isRequired,\n  loginActionFunc: PropTypes.func.isRequired,\n  settings: PropTypes.objectOf().isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveToken: value => dispatch(asyncToken(value)),\n  loginActionFunc: (username, email) => dispatch(loginAction(username, email))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Home.js"],"names":["React","PropTypes","connect","asyncToken","loginAction","createRanking","getGravatar","BsFillTrophyFill","BsPlayFill","IoMdSettings","Button","Input","Home","Component","constructor","props","goFor","pageName","history","push","state","username","email","handleChangeText","bind","componentDidMount","window","scrollTo","target","name","value","setState","handleClickPlay","loginActionFunc","saveToken","settings","then","response","player","assertions","score","gravatarEmail","url","localStorage","setItem","JSON","stringify","renderForm","color","fontSize","margin","render","propTypes","func","isRequired","objectOf","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { asyncToken, loginAction } from '../actions';\nimport { createRanking } from '../services/localStorage';\nimport { getGravatar } from '../serviceAPI';\nimport '../styles/home.css';\n\nimport { BsFillTrophyFill, BsPlayFill } from 'react-icons/bs';\nimport { IoMdSettings } from 'react-icons/io';\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n    };\n    this.handleChangeText = this.handleChangeText.bind(this);\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  goFor = (pageName) => {\n    this.props.history.push(`/${pageName}`);\n  };\n\n  handleChangeText({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClickPlay() {\n    const { username, email } = this.state;\n    const { loginActionFunc, saveToken, settings } = this.props;\n    saveToken(settings);\n    loginActionFunc(username, email);\n    getGravatar(email).then((response) => {\n      const player = {\n        player: {\n          name: username,\n          assertions: 0,\n          score: 0,\n          gravatarEmail: response.url,\n        },\n      };\n      localStorage.setItem('state', JSON.stringify(player));\n    });\n    createRanking();\n    this.goFor('play');\n  }\n\n  renderForm() {\n    const { username, email } = this.state;\n    return (\n      <form className=\"form-login\">\n        <label\n          style={{ color: 'white', fontSize: '1.4rem' }}\n          htmlFor=\"player-name\"\n        >\n          Player Name\n          <Input\n            type=\"text\"\n            name=\"username\"\n            value={username}\n            onChange={this.handleChangeText}\n          />\n        </label>\n        <label\n          style={{ color: 'white', fontSize: '1.4rem', margin: '0 10px' }}\n          htmlFor=\"gravatar-email\"\n        >\n          Gravatar E-mail\n          <Input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            onChange={this.handleChangeText}\n            width=\"30rem\"\n          />\n        </label>\n        <Button\n          icon={<BsPlayFill color=\"white\" size=\"2rem\" />}\n          iconEnd\n          title=\"Play\"\n          textColor=\"white\"\n          textSize=\"1.6rem\"\n          type=\"submit\"\n          withBorder\n          onClick={() => this.handleClickPlay()}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container-main\">\n        <div className=\"container-top\">\n          {this.renderForm()}\n          <Button\n            icon={<BsFillTrophyFill color=\"white\" size=\"1.6rem\" />}\n            title=\"Ranking\"\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={() => this.goFor('ranking')}\n          ></Button>\n          <Button\n            icon={<IoMdSettings color=\"white\" size=\"1.8rem\" />}\n            title=\"Settings\"\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={() => this.goFor('settings')}\n          ></Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nHome.propTypes = {\n  saveToken: PropTypes.func.isRequired,\n  loginActionFunc: PropTypes.func.isRequired,\n  settings: PropTypes.objectOf().isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveToken: (value) => dispatch(asyncToken(value)),\n  loginActionFunc: (username, email) => dispatch(loginAction(username, email)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n"]},"metadata":{},"sourceType":"module"}