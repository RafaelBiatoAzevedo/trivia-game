{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Settings.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\nimport { DropDown } from '../components/DropDown';\nimport { updateSettings } from '../actions';\nimport { getCategories } from '../serviceAPI';\nimport '../styles/settings.css';\nconst DIFFICULTIES = [{\n  id: 'easy',\n  name: 'Easy'\n}, {\n  id: 'medium',\n  name: 'Medium'\n}, {\n  id: 'hard',\n  name: 'Hard'\n}];\nconst TYPES_QUESTIONS = [{\n  id: 'multiple',\n  name: 'Multiple choice'\n}, {\n  id: 'true/false',\n  name: 'True or False'\n}];\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = this.initialState.bind(this);\n    this.state = {\n      categories: [],\n      settings: {}\n    };\n  }\n\n  componentDidMount() {\n    this.initialState();\n  }\n\n  initialState() {\n    const {\n      settings\n    } = this.props;\n    this.setState({\n      settings\n    });\n    getCategories().then(categories => this.setState({\n      categories\n    }));\n  }\n\n  updateSettings(evt) {\n    const {\n      name,\n      value\n    } = evt.target;\n    this.setState(state => ({ ...state,\n      settings: { ...state.settings,\n        [`${name}`]: value\n      }\n    }));\n  }\n\n  renderSelectType() {\n    const {\n      settings\n    } = this.state;\n    const {\n      type\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputType\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, \"Type\", /*#__PURE__*/React.createElement(\"select\", {\n      id: \"inputType\",\n      onChange: evt => this.updateSettings(evt),\n      name: \"type\",\n      value: type,\n      className: \"inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, \"All\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"multiple\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"Multiple Choice\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"boolean\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, \"True or False\")));\n  }\n\n  render() {\n    const {\n      settings,\n      categories\n    } = this.state;\n    const {\n      number,\n      category,\n      difficulty,\n      type\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main-play\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        color: 'white',\n        fontSize: '3rem',\n        padding: '2rem 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Settings\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"inputNumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"Number Questions\"), /*#__PURE__*/React.createElement(Input, {\n      width: \"100%\",\n      textSize: \"1.6rem\",\n      type: \"number\",\n      name: \"inputNumber\",\n      value: number,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputCategory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \"Categories\"), /*#__PURE__*/React.createElement(DropDown, {\n      items: categories,\n      name: \"category\",\n      value: category,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputCategory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"Difficulties\"), /*#__PURE__*/React.createElement(DropDown, {\n      items: DIFFICULTIES,\n      name: \"difficulty\",\n      value: difficulty,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputCategory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"Type Questions\"), /*#__PURE__*/React.createElement(DropDown, {\n      items: TYPES_QUESTIONS,\n      name: \"type\",\n      value: type,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      title: \"Save settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Reset default\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nSettings.propTypes = {\n  settings: PropTypes.objectOf(),\n  saveSettings: PropTypes.func\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  settings: state.settings\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveSettings: value => dispatch(updateSettings(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Settings.js"],"names":["React","connect","Link","PropTypes","Button","Input","DropDown","updateSettings","getCategories","DIFFICULTIES","id","name","TYPES_QUESTIONS","Settings","Component","constructor","props","initialState","bind","state","categories","settings","componentDidMount","setState","then","evt","value","target","renderSelectType","type","render","number","category","difficulty","color","fontSize","padding","propTypes","objectOf","saveSettings","func","isRequired","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAO,wBAAP;AAEA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,MAAN;AAAcC,EAAAA,IAAI,EAAE;AAApB,CADmB,EAEnB;AAAED,EAAAA,EAAE,EAAE,QAAN;AAAgBC,EAAAA,IAAI,EAAE;AAAtB,CAFmB,EAGnB;AAAED,EAAAA,EAAE,EAAE,MAAN;AAAcC,EAAAA,IAAI,EAAE;AAApB,CAHmB,CAArB;AAMA,MAAMC,eAAe,GAAG,CACtB;AAAEF,EAAAA,EAAE,EAAE,UAAN;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CADsB,EAEtB;AAAED,EAAAA,EAAE,EAAE,YAAN;AAAoBC,EAAAA,IAAI,EAAE;AAA1B,CAFsB,CAAxB;;AAKA,MAAME,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKL,YAAL;AACD;;AAEDA,EAAAA,YAAY,GAAG;AACb,UAAM;AAAEI,MAAAA;AAAF,QAAe,KAAKL,KAA1B;AACA,SAAKO,QAAL,CAAc;AAAEF,MAAAA;AAAF,KAAd;AACAb,IAAAA,aAAa,GAAGgB,IAAhB,CAAsBJ,UAAD,IAAgB,KAAKG,QAAL,CAAc;AAAEH,MAAAA;AAAF,KAAd,CAArC;AACD;;AAEDb,EAAAA,cAAc,CAACkB,GAAD,EAAM;AAClB,UAAM;AAAEd,MAAAA,IAAF;AAAQe,MAAAA;AAAR,QAAkBD,GAAG,CAACE,MAA5B;AACA,SAAKJ,QAAL,CAAeJ,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBE,MAAAA,QAAQ,EAAE,EAAE,GAAGF,KAAK,CAACE,QAAX;AAAqB,SAAE,GAAEV,IAAK,EAAT,GAAae;AAAlC;AAFc,KAAZ,CAAd;AAID;;AAEDE,EAAAA,gBAAgB,GAAG;AACjB,UAAM;AAAEP,MAAAA;AAAF,QAAe,KAAKF,KAA1B;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAWR,QAAjB;AACA,wBACE;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,OAAO,EAAC,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEE;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,QAAQ,EAAGI,GAAD,IAAS,KAAKlB,cAAL,CAAoBkB,GAApB,CAFrB;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,KAAK,EAAEI,IAJT;AAKE,MAAA,SAAS,EAAC,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAPF,eAQE;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBARF,eASE;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBATF,CAFF,CADF;AAgBD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,QAAF;AAAYD,MAAAA;AAAZ,QAA2B,KAAKD,KAAtC;AACA,UAAM;AAAEY,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA,UAApB;AAAgCJ,MAAAA;AAAhC,QAAyCR,QAA/C;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,KAAK,EAAE;AAAEa,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,QAAQ,EAAE,MAA5B;AAAoCC,QAAAA,OAAO,EAAE;AAA7C,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,QAAQ,EAAC,QAFX;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,IAAI,EAAC,aAJP;AAKE,MAAA,KAAK,EAAEL,MALT;AAME,MAAA,QAAQ,EAAGN,GAAD,IAAS,KAAKlB,cAAL,CAAoBkB,GAApB,CANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,OAAO,EAAC,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,eAaE,oBAAC,QAAD;AACE,MAAA,KAAK,EAAEL,UADT;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,KAAK,EAAEY,QAHT;AAIE,MAAA,QAAQ,EAAGP,GAAD,IAAS,KAAKlB,cAAL,CAAoBkB,GAApB,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,eAmBE;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,OAAO,EAAC,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnBF,eAsBE,oBAAC,QAAD;AACE,MAAA,KAAK,EAAEhB,YADT;AAEE,MAAA,IAAI,EAAC,YAFP;AAGE,MAAA,KAAK,EAAEwB,UAHT;AAIE,MAAA,QAAQ,EAAGR,GAAD,IAAS,KAAKlB,cAAL,CAAoBkB,GAApB,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBF,eA4BE;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,OAAO,EAAC,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA5BF,eA+BE,oBAAC,QAAD;AACE,MAAA,KAAK,EAAEb,eADT;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAEiB,IAHT;AAIE,MAAA,QAAQ,EAAGJ,GAAD,IAAS,KAAKlB,cAAL,CAAoBkB,GAApB,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BF,CAJF,eA0CE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1CF,eA2CE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3CF,CADF;AA+CD;;AApGoC;;AAuGvCZ,QAAQ,CAACwB,SAAT,GAAqB;AACnBhB,EAAAA,QAAQ,EAAElB,SAAS,CAACmC,QAAV,EADS;AAEnBC,EAAAA,YAAY,EAAEpC,SAAS,CAACqC;AAFL,EAGnBC,UAHF;;AAKA,MAAMC,eAAe,GAAIvB,KAAD,KAAY;AAClCE,EAAAA,QAAQ,EAAEF,KAAK,CAACE;AADkB,CAAZ,CAAxB;;AAIA,MAAMsB,kBAAkB,GAAIC,QAAD,KAAe;AACxCL,EAAAA,YAAY,EAAGb,KAAD,IAAWkB,QAAQ,CAACrC,cAAc,CAACmB,KAAD,CAAf;AADO,CAAf,CAA3B;;AAIA,eAAezB,OAAO,CAACyC,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C9B,QAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\nimport { DropDown } from '../components/DropDown';\nimport { updateSettings } from '../actions';\nimport { getCategories } from '../serviceAPI';\nimport '../styles/settings.css';\n\nconst DIFFICULTIES = [\n  { id: 'easy', name: 'Easy' },\n  { id: 'medium', name: 'Medium' },\n  { id: 'hard', name: 'Hard' },\n];\n\nconst TYPES_QUESTIONS = [\n  { id: 'multiple', name: 'Multiple choice' },\n  { id: 'true/false', name: 'True or False' },\n];\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = this.initialState.bind(this);\n    this.state = {\n      categories: [],\n      settings: {},\n    };\n  }\n\n  componentDidMount() {\n    this.initialState();\n  }\n\n  initialState() {\n    const { settings } = this.props;\n    this.setState({ settings });\n    getCategories().then((categories) => this.setState({ categories }));\n  }\n\n  updateSettings(evt) {\n    const { name, value } = evt.target;\n    this.setState((state) => ({\n      ...state,\n      settings: { ...state.settings, [`${name}`]: value },\n    }));\n  }\n\n  renderSelectType() {\n    const { settings } = this.state;\n    const { type } = settings;\n    return (\n      <label className=\"label-inputs\" htmlFor=\"inputType\">\n        Type\n        <select\n          id=\"inputType\"\n          onChange={(evt) => this.updateSettings(evt)}\n          name=\"type\"\n          value={type}\n          className=\"inputs\"\n        >\n          <option>All</option>\n          <option value=\"multiple\">Multiple Choice</option>\n          <option value=\"boolean\">True or False</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    const { settings, categories } = this.state;\n    const { number, category, difficulty, type } = settings;\n\n    return (\n      <div className=\"container-main-play\">\n        <h1 style={{ color: 'white', fontSize: '3rem', padding: '2rem 0' }}>\n          Settings\n        </h1>\n        <div className=\"container-settings\">\n          <label htmlFor=\"inputNumber\">Number Questions</label>\n          <Input\n            width=\"100%\"\n            textSize=\"1.6rem\"\n            type=\"number\"\n            name=\"inputNumber\"\n            value={number}\n            onChange={(evt) => this.updateSettings(evt)}\n          ></Input>\n          <label className=\"label-inputs\" htmlFor=\"inputCategory\">\n            Categories\n          </label>\n          <DropDown\n            items={categories}\n            name=\"category\"\n            value={category}\n            onChange={(evt) => this.updateSettings(evt)}\n          ></DropDown>\n          <label className=\"label-inputs\" htmlFor=\"inputCategory\">\n            Difficulties\n          </label>\n          <DropDown\n            items={DIFFICULTIES}\n            name=\"difficulty\"\n            value={difficulty}\n            onChange={(evt) => this.updateSettings(evt)}\n          ></DropDown>\n          <label className=\"label-inputs\" htmlFor=\"inputCategory\">\n            Type Questions\n          </label>\n          <DropDown\n            items={TYPES_QUESTIONS}\n            name=\"type\"\n            value={type}\n            onChange={(evt) => this.updateSettings(evt)}\n          ></DropDown>\n        </div>\n        <Button title=\"Save settings\"></Button>\n        <Button title=\"Reset default\"></Button>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  settings: PropTypes.objectOf(),\n  saveSettings: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveSettings: (value) => dispatch(updateSettings(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n"]},"metadata":{},"sourceType":"module"}