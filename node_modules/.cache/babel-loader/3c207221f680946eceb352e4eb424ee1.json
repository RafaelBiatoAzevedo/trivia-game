{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Settings.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FaArrowLeft } from 'react-icons/fa';\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\nimport { DropDown } from '../components/DropDown';\nimport { updateSettings } from '../actions';\nimport { getCategories } from '../services/serviceAPI';\nimport '../styles/settings.css';\nconst DIFFICULTIES = [{\n  id: 'easy',\n  name: 'Easy'\n}, {\n  id: 'medium',\n  name: 'Medium'\n}, {\n  id: 'hard',\n  name: 'Hard'\n}];\nconst TYPES_QUESTIONS = [{\n  id: 'multiple',\n  name: 'Multiple choice'\n}, {\n  id: 'boolean',\n  name: 'True or False'\n}];\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.goFor = pageName => {\n      this.props.history.push(`/${pageName}`);\n    };\n\n    this.initialState = this.initialState.bind(this);\n    this.this.state = {\n      categories: [],\n      settings: {}\n    };\n  }\n\n  componentDidMount() {\n    this.initialState();\n  }\n\n  initialState() {\n    const {\n      settings\n    } = this.props;\n    this.setState({\n      settings\n    });\n    getCategories().then(categories => this.setState({\n      categories\n    }));\n  }\n\n  updateSettings(evt) {\n    const {\n      name,\n      value\n    } = evt.target;\n    let valueValid = null;\n    if (name === 'number' && value > 50) valueValid = 50;\n    this.setState(state => ({ ...state,\n      settings: { ...state.settings,\n        [`${name}`]: valueValid || value\n      }\n    }));\n  }\n\n  handleClickReset() {// this.setState({\n    //   settings: {\n    //     number: 5,\n    //     category: 'All',\n    //     difficulty: 'All',\n    //     type: 'All',\n    //   },\n    // });\n  }\n\n  handleClickSaveSettings() {}\n\n  render() {\n    const {\n      settings,\n      categories\n    } = this.state;\n    const {\n      number,\n      category,\n      difficulty,\n      type\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main-play\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        color: 'white',\n        fontSize: '3rem',\n        padding: '2rem 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Settings\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-btns\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      icon: /*#__PURE__*/React.createElement(FaArrowLeft, {\n        size: \"1.6rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 19\n        }\n      }),\n      title: \"Home\",\n      textSize: \"1.4rem\",\n      textColor: \"white\",\n      textWeight: \"600\",\n      onClick: () => this.goFor(''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"inputNumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, \"Number Questions\"), /*#__PURE__*/React.createElement(Input, {\n      width: \"100%\",\n      textSize: \"1.6rem\",\n      type: \"number\",\n      name: \"number\",\n      min: 1,\n      max: 50,\n      value: number,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputCategory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, \"Categories\"), /*#__PURE__*/React.createElement(DropDown, {\n      items: categories,\n      name: \"category\",\n      value: category,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputCategory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \"Difficulties\"), /*#__PURE__*/React.createElement(DropDown, {\n      items: DIFFICULTIES,\n      name: \"difficulty\",\n      value: difficulty,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputCategory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, \"Type Questions\"), /*#__PURE__*/React.createElement(DropDown, {\n      items: TYPES_QUESTIONS,\n      name: \"type\",\n      value: type,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-btns\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      title: \"Reset default\",\n      textColor: \"#fff\",\n      textSize: \"1.6rem\",\n      textWeight: \"600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Save settings\",\n      textColor: \"#fff\",\n      textSize: \"1.6rem\",\n      textWeight: \"600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nSettings.propTypes = {\n  settings: PropTypes.objectOf(),\n  saveSettings: PropTypes.func\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  settings: state.settings\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveSettings: value => dispatch(updateSettings(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Settings.js"],"names":["React","connect","PropTypes","FaArrowLeft","Button","Input","DropDown","updateSettings","getCategories","DIFFICULTIES","id","name","TYPES_QUESTIONS","Settings","Component","constructor","props","goFor","pageName","history","push","initialState","bind","this","state","categories","settings","componentDidMount","setState","then","evt","value","target","valueValid","handleClickReset","handleClickSaveSettings","render","number","category","difficulty","type","color","fontSize","padding","propTypes","objectOf","saveSettings","func","isRequired","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { FaArrowLeft } from 'react-icons/fa';\n\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\nimport { DropDown } from '../components/DropDown';\nimport { updateSettings } from '../actions';\nimport { getCategories } from '../services/serviceAPI';\nimport '../styles/settings.css';\n\nconst DIFFICULTIES = [\n  { id: 'easy', name: 'Easy' },\n  { id: 'medium', name: 'Medium' },\n  { id: 'hard', name: 'Hard' },\n];\n\nconst TYPES_QUESTIONS = [\n  { id: 'multiple', name: 'Multiple choice' },\n  { id: 'boolean', name: 'True or False' },\n];\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = this.initialState.bind(this);\n    this.this.state = {\n      categories: [],\n      settings: {},\n    };\n  }\n\n  componentDidMount() {\n    this.initialState();\n  }\n\n  goFor = (pageName) => {\n    this.props.history.push(`/${pageName}`);\n  };\n\n  initialState() {\n    const { settings } = this.props;\n    this.setState({ settings });\n    getCategories().then((categories) => this.setState({ categories }));\n  }\n\n  updateSettings(evt) {\n    const { name, value } = evt.target;\n    let valueValid = null;\n    if (name === 'number' && value > 50) valueValid = 50;\n\n    this.setState((state) => ({\n      ...state,\n      settings: { ...state.settings, [`${name}`]: valueValid || value },\n    }));\n  }\n\n  handleClickReset() {\n    // this.setState({\n    //   settings: {\n    //     number: 5,\n    //     category: 'All',\n    //     difficulty: 'All',\n    //     type: 'All',\n    //   },\n    // });\n  }\n\n  handleClickSaveSettings() {}\n\n  render() {\n    const { settings, categories } = this.state;\n    const { number, category, difficulty, type } = settings;\n\n    return (\n      <div className=\"container-main-play\">\n        <h1 style={{ color: 'white', fontSize: '3rem', padding: '2rem 0' }}>\n          Settings\n        </h1>\n        <div className=\"container-btns\">\n          <Button\n            icon={<FaArrowLeft size=\"1.6rem\" />}\n            title=\"Home\"\n            textSize=\"1.4rem\"\n            textColor=\"white\"\n            textWeight=\"600\"\n            onClick={() => this.goFor('')}\n          />\n        </div>\n        <div className=\"container-settings\">\n          <label htmlFor=\"inputNumber\">Number Questions</label>\n          <Input\n            width=\"100%\"\n            textSize=\"1.6rem\"\n            type=\"number\"\n            name=\"number\"\n            min={1}\n            max={50}\n            value={number}\n            onChange={(evt) => this.updateSettings(evt)}\n          ></Input>\n          <label className=\"label-inputs\" htmlFor=\"inputCategory\">\n            Categories\n          </label>\n          <DropDown\n            items={categories}\n            name=\"category\"\n            value={category}\n            onChange={(evt) => this.updateSettings(evt)}\n          ></DropDown>\n          <label className=\"label-inputs\" htmlFor=\"inputCategory\">\n            Difficulties\n          </label>\n          <DropDown\n            items={DIFFICULTIES}\n            name=\"difficulty\"\n            value={difficulty}\n            onChange={(evt) => this.updateSettings(evt)}\n          ></DropDown>\n          <label className=\"label-inputs\" htmlFor=\"inputCategory\">\n            Type Questions\n          </label>\n          <DropDown\n            items={TYPES_QUESTIONS}\n            name=\"type\"\n            value={type}\n            onChange={(evt) => this.updateSettings(evt)}\n          ></DropDown>\n          <div className=\"container-btns\">\n            <Button\n              title=\"Reset default\"\n              textColor=\"#fff\"\n              textSize=\"1.6rem\"\n              textWeight=\"600\"\n            ></Button>\n            <Button\n              title=\"Save settings\"\n              textColor=\"#fff\"\n              textSize=\"1.6rem\"\n              textWeight=\"600\"\n            ></Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  settings: PropTypes.objectOf(),\n  saveSettings: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveSettings: (value) => dispatch(updateSettings(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n"]},"metadata":{},"sourceType":"module"}