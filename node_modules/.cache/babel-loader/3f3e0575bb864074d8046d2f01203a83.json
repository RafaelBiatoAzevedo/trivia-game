{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Play.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveScore, saveInterval, setTime, restartTime, updateStatus } from '../actions';\nimport { addPlayerInRanking } from '../services/localStorage';\nimport { decodeHtml } from '../services/prepareAnswers';\nimport { CgPlayTrackNextO } from 'react-icons/cg';\nimport { GiExitDoor } from 'react-icons/gi';\nimport Timer from '../components/Timer';\nimport Header from '../components/Header';\nimport { Button } from '../components/Button';\nimport '../styles/play.css';\n\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.goFor = pageName => {\n      this.props.history.push(`/${pageName}`);\n    };\n\n    this.state = {\n      answerIndex: 0,\n      answerSelected: false\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.styleAnswer = this.styleAnswer.bind(this);\n    this.answerSelected = this.answerSelected.bind(this);\n    this.setRanking = this.setRanking.bind(this);\n  }\n\n  setRanking() {\n    const {\n      player\n    } = JSON.parse(localStorage.getItem('state'));\n    addPlayerInRanking(player.gravatarEmail, player);\n    this.goFor('feedback');\n  }\n\n  setReduxAndLocalStorage(answer) {\n    const {\n      asks,\n      time\n    } = this.props;\n    const ask = asks.find(askItem => answer === askItem.correct_answer);\n    const {\n      difficulty\n    } = ask;\n    const valuePattern = 10;\n    const valueHard = 3;\n    let valueDifficulty = 0;\n    if (difficulty === 'hard') valueDifficulty = valueHard;else if (difficulty === 'medium') valueDifficulty = 2;else valueDifficulty = 1;\n    const score = valuePattern + time * valueDifficulty;\n    const dataStorage = { ...JSON.parse(localStorage.getItem('state'))\n    };\n    dataStorage.player.score += score;\n    this.updateScore(dataStorage);\n  }\n\n  updateScore(dataStorage) {\n    const {\n      savScore\n    } = this.props;\n    dataStorage.player.assertions += 1;\n    savScore(dataStorage.player.score);\n    localStorage.setItem('state', JSON.stringify({ ...dataStorage\n    }));\n  }\n\n  styleAnswer(isCorrect) {\n    const {\n      answerSelected\n    } = this.state;\n\n    if (answerSelected) {\n      if (isCorrect) {\n        return {\n          border: '3px solid rgb(6, 240, 15)'\n        };\n      } else {\n        return {\n          border: '3px solid rgb(255, 0, 0)'\n        };\n      }\n    }\n\n    return {\n      border: null\n    };\n  }\n\n  answerSelected(evt) {\n    const {\n      interval\n    } = this.props;\n    const {\n      value\n    } = evt.target;\n    this.setState({\n      answerSelected: true\n    });\n    clearInterval(interval);\n    if (value) this.setReduxAndLocalStorage(value);\n  }\n\n  nextQuestion() {\n    const {\n      setTimeProp,\n      saveIntervalProp,\n      restartTimeProp\n    } = this.props;\n    const {\n      answerIndex\n    } = this.state;\n    this.setState({\n      answerIndex: answerIndex + 1,\n      answerSelected: false\n    });\n    restartTimeProp();\n    const intervalTime = 1000;\n    const interval = setInterval(() => setTimeProp(1), intervalTime);\n    saveIntervalProp(interval);\n  }\n\n  btnNext() {\n    const {\n      asks\n    } = this.props;\n    const {\n      answerIndex\n    } = this.state;\n    const MAX = asks.length - 1;\n\n    if (answerIndex === MAX) {\n      return /*#__PURE__*/React.createElement(Button, {\n        icon: /*#__PURE__*/React.createElement(GiExitDoor, {\n          color: \"#3babc4\",\n          size: \"3rem\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }\n        }),\n        title: \"Finish\",\n        textColor: \"#3babc4\",\n        textSize: \"2rem\",\n        type: \"button\",\n        onClick: this.setRanking,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Button, {\n      className: \"button-next\",\n      icon: /*#__PURE__*/React.createElement(CgPlayTrackNextO, {\n        size: \"3rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }),\n      title: \"Next\",\n      textColor: \"#49a356\",\n      textSize: \"2rem\",\n      type: \"button\",\n      onClick: this.nextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    });\n  }\n\n  renderAnswers(answers) {\n    const {\n      answerIndex,\n      answerSelected\n    } = this.state;\n    const {\n      asks\n    } = this.props;\n    return answers.map(answerElement => {\n      const {\n        answer\n      } = answerElement;\n\n      if (answer === asks[answerIndex].correct_answer) {\n        return /*#__PURE__*/React.createElement(Button, {\n          title: decodeHtml(answer),\n          isBtnAnswer: true,\n          textColor: \"white\",\n          textSize: \"1.6rem\",\n          value: answer,\n          disabled: answerSelected,\n          type: \"button\",\n          style: this.styleAnswer(true),\n          onClick: this.answerSelected,\n          withBorder: true,\n          padding: \"1rem 3rem\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 11\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(Button, {\n        title: decodeHtml(answer),\n        isBtnAnswer: true,\n        textSize: \"1.6rem\",\n        textColor: \"white\",\n        value: '',\n        disabled: answerSelected,\n        type: \"button\",\n        style: this.styleAnswer(false),\n        onClick: this.answerSelected,\n        withBorder: true,\n        padding: \"1rem 3rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      });\n    });\n  }\n\n  render() {\n    const {\n      answerIndex,\n      answerSelected\n    } = this.state;\n    const {\n      asks,\n      statusTimer,\n      updateStatusProp\n    } = this.props;\n    const MAX_QUESTIONS = asks.length - 1;\n\n    if (statusTimer) {\n      this.setState({\n        answerSelected: true\n      });\n      updateStatusProp();\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main-play\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }), asks.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-ask\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, decodeHtml(asks[answerIndex].category)), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, decodeHtml(asks[answerIndex].question)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-answers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, this.renderAnswers(asks[answerIndex].results)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-btn-next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, answerSelected && answerIndex <= MAX_QUESTIONS && this.btnNext()), /*#__PURE__*/React.createElement(Timer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nPlay.propTypes = {\n  asks: PropTypes.arrayOf(PropTypes.object),\n  savScore: PropTypes.func,\n  setTimeProp: PropTypes.func,\n  saveIntervalProp: PropTypes.func,\n  restartTimeProp: PropTypes.func,\n  interval: PropTypes.number,\n  time: PropTypes.number\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  asks: state.askAndAnswersReducer,\n  interval: state.timer.interval,\n  time: state.timer.time,\n  statusTimer: state.timer.statusFinishTimer,\n  player: state.player\n});\n\nconst mapDispatchToProps = dispatch => ({\n  savScore: score => dispatch(saveScore(score)),\n  setTimeProp: value => dispatch(setTime(value)),\n  saveIntervalProp: value => dispatch(saveInterval(value)),\n  restartTimeProp: () => dispatch(restartTime()),\n  updateStatusProp: () => dispatch(updateStatus())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Play);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Play.js"],"names":["React","PropTypes","connect","saveScore","saveInterval","setTime","restartTime","updateStatus","addPlayerInRanking","decodeHtml","CgPlayTrackNextO","GiExitDoor","Timer","Header","Button","Play","Component","constructor","props","goFor","pageName","history","push","state","answerIndex","answerSelected","nextQuestion","bind","styleAnswer","setRanking","player","JSON","parse","localStorage","getItem","gravatarEmail","setReduxAndLocalStorage","answer","asks","time","ask","find","askItem","correct_answer","difficulty","valuePattern","valueHard","valueDifficulty","score","dataStorage","updateScore","savScore","assertions","setItem","stringify","isCorrect","border","evt","interval","value","target","setState","clearInterval","setTimeProp","saveIntervalProp","restartTimeProp","intervalTime","setInterval","btnNext","MAX","length","renderAnswers","answers","map","answerElement","render","statusTimer","updateStatusProp","MAX_QUESTIONS","category","question","results","propTypes","arrayOf","object","func","number","isRequired","mapStateToProps","askAndAnswersReducer","timer","statusFinishTimer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  saveScore,\n  saveInterval,\n  setTime,\n  restartTime,\n  updateStatus,\n} from '../actions';\nimport { addPlayerInRanking } from '../services/localStorage';\nimport { decodeHtml } from '../services/prepareAnswers';\nimport { CgPlayTrackNextO } from 'react-icons/cg';\nimport { GiExitDoor } from 'react-icons/gi';\n\nimport Timer from '../components/Timer';\nimport Header from '../components/Header';\nimport { Button } from '../components/Button';\nimport '../styles/play.css';\n\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answerIndex: 0,\n      answerSelected: false,\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.styleAnswer = this.styleAnswer.bind(this);\n    this.answerSelected = this.answerSelected.bind(this);\n    this.setRanking = this.setRanking.bind(this);\n  }\n\n  setRanking() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    addPlayerInRanking(player.gravatarEmail, player);\n    this.goFor('feedback');\n  }\n\n  goFor = (pageName) => {\n    this.props.history.push(`/${pageName}`);\n  };\n\n  setReduxAndLocalStorage(answer) {\n    const { asks, time } = this.props;\n    const ask = asks.find((askItem) => answer === askItem.correct_answer);\n    const { difficulty } = ask;\n    const valuePattern = 10;\n    const valueHard = 3;\n    let valueDifficulty = 0;\n\n    if (difficulty === 'hard') valueDifficulty = valueHard;\n    else if (difficulty === 'medium') valueDifficulty = 2;\n    else valueDifficulty = 1;\n    const score = valuePattern + time * valueDifficulty;\n    const dataStorage = { ...JSON.parse(localStorage.getItem('state')) };\n    dataStorage.player.score += score;\n    this.updateScore(dataStorage);\n  }\n\n  updateScore(dataStorage) {\n    const { savScore } = this.props;\n    dataStorage.player.assertions += 1;\n    savScore(dataStorage.player.score);\n    localStorage.setItem('state', JSON.stringify({ ...dataStorage }));\n  }\n\n  styleAnswer(isCorrect) {\n    const { answerSelected } = this.state;\n\n    if (answerSelected) {\n      if (isCorrect) {\n        return { border: '3px solid rgb(6, 240, 15)' };\n      } else {\n        return { border: '3px solid rgb(255, 0, 0)' };\n      }\n    }\n    return { border: null };\n  }\n\n  answerSelected(evt) {\n    const { interval } = this.props;\n    const { value } = evt.target;\n\n    this.setState({ answerSelected: true });\n    clearInterval(interval);\n    if (value) this.setReduxAndLocalStorage(value);\n  }\n\n  nextQuestion() {\n    const { setTimeProp, saveIntervalProp, restartTimeProp } = this.props;\n    const { answerIndex } = this.state;\n    this.setState({ answerIndex: answerIndex + 1, answerSelected: false });\n    restartTimeProp();\n    const intervalTime = 1000;\n    const interval = setInterval(() => setTimeProp(1), intervalTime);\n    saveIntervalProp(interval);\n  }\n\n  btnNext() {\n    const { asks } = this.props;\n    const { answerIndex } = this.state;\n    const MAX = asks.length - 1;\n\n    if (answerIndex === MAX) {\n      return (\n        <Button\n          icon={<GiExitDoor color=\"#3babc4\" size=\"3rem\" />}\n          title=\"Finish\"\n          textColor=\"#3babc4\"\n          textSize=\"2rem\"\n          type=\"button\"\n          onClick={this.setRanking}\n        />\n      );\n    }\n    return (\n      <Button\n        className=\"button-next\"\n        icon={<CgPlayTrackNextO size=\"3rem\" />}\n        title=\"Next\"\n        textColor=\"#49a356\"\n        textSize=\"2rem\"\n        type=\"button\"\n        onClick={this.nextQuestion}\n      />\n    );\n  }\n\n  renderAnswers(answers) {\n    const { answerIndex, answerSelected } = this.state;\n    const { asks } = this.props;\n\n    return answers.map((answerElement) => {\n      const { answer } = answerElement;\n\n      if (answer === asks[answerIndex].correct_answer) {\n        return (\n          <Button\n            title={decodeHtml(answer)}\n            isBtnAnswer\n            textColor=\"white\"\n            textSize=\"1.6rem\"\n            value={answer}\n            disabled={answerSelected}\n            type=\"button\"\n            style={this.styleAnswer(true)}\n            onClick={this.answerSelected}\n            withBorder\n            padding=\"1rem 3rem\"\n          />\n        );\n      }\n      return (\n        <Button\n          title={decodeHtml(answer)}\n          isBtnAnswer\n          textSize=\"1.6rem\"\n          textColor=\"white\"\n          value={''}\n          disabled={answerSelected}\n          type=\"button\"\n          style={this.styleAnswer(false)}\n          onClick={this.answerSelected}\n          withBorder\n          padding=\"1rem 3rem\"\n        />\n      );\n    });\n  }\n\n  render() {\n    const { answerIndex, answerSelected } = this.state;\n    const { asks, statusTimer, updateStatusProp } = this.props;\n    const MAX_QUESTIONS = asks.length - 1;\n\n    if (statusTimer) {\n      this.setState({ answerSelected: true });\n      updateStatusProp();\n    }\n\n    return (\n      <div className=\"container-main-play\">\n        <Header />\n        {asks.length > 0 ? (\n          <div className=\"container-ask\">\n            <h1>{decodeHtml(asks[answerIndex].category)}</h1>\n            <h2>{decodeHtml(asks[answerIndex].question)}</h2>\n            <div className=\"container-answers\">\n              {this.renderAnswers(asks[answerIndex].results)}\n            </div>\n            <div className=\"container-btn-next\">\n              {answerSelected && answerIndex <= MAX_QUESTIONS && this.btnNext()}\n            </div>\n            <Timer />\n          </div>\n        ) : (\n          <div className=\"loader\"></div>\n        )}\n      </div>\n    );\n  }\n}\n\nPlay.propTypes = {\n  asks: PropTypes.arrayOf(PropTypes.object),\n  savScore: PropTypes.func,\n  setTimeProp: PropTypes.func,\n  saveIntervalProp: PropTypes.func,\n  restartTimeProp: PropTypes.func,\n  interval: PropTypes.number,\n  time: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  asks: state.askAndAnswersReducer,\n  interval: state.timer.interval,\n  time: state.timer.time,\n  statusTimer: state.timer.statusFinishTimer,\n  player: state.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  savScore: (score) => dispatch(saveScore(score)),\n  setTimeProp: (value) => dispatch(setTime(value)),\n  saveIntervalProp: (value) => dispatch(saveInterval(value)),\n  restartTimeProp: () => dispatch(restartTime()),\n  updateStatusProp: () => dispatch(updateStatus()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Play);\n"]},"metadata":{},"sourceType":"module"}