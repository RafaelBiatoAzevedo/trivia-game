{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Feedback.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/feedback.css';\nimport { Button } from '../components/Button';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.messageAssertions = () => {\n      const {\n        player,\n        quantityQuestion\n      } = this.props;\n      const {\n        assertions\n      } = player;\n      if (assertions === 0) return \"Ops !!!, You didn't get any questions right\";\n      if (assertions === quantityQuestion) return 'Excellent !!!, Keep it up';\n      if (assertions > Math.ceil(quantityQuestion / 2)) return 'Very good !!!, But you can be improved';\n      if (assertions === Math.ceil(quantityQuestion / 2)) return 'Good !!!, You are in the average';else return 'Bad !!!, you have a lot to improve';\n    };\n  }\n\n  render() {\n    const {\n      player,\n      quantityQuestion\n    } = this.props;\n    const {\n      name,\n      gravatarEmail,\n      score,\n      assertions\n    } = player;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        color: 'white',\n        fontSize: '3rem',\n        padding: '2rem 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, \"Results\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: gravatarEmail,\n      alt: \"avatarImage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, this.messageAssertions()), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, `Correct Questions:  ${assertions}/${quantityQuestion} - ${assertions / quantityQuestion * 100}%`), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, `${score}  pts`), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      title: \"Home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Play Again\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Ranking\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  quantityQuestion: state.settings.number\n});\n\nFeedback.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string\n  }),\n  quantityQuestion: PropTypes.number.isRequired\n};\nexport default connect(mapStateToProps)(Feedback);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Feedback.js"],"names":["React","connect","PropTypes","Button","Feedback","Component","messageAssertions","player","quantityQuestion","props","assertions","Math","ceil","render","name","gravatarEmail","score","color","fontSize","padding","mapStateToProps","state","settings","number","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/feedback.css';\n\nimport { Button } from '../components/Button';\n\nclass Feedback extends React.Component {\n  messageAssertions = () => {\n    const { player, quantityQuestion } = this.props;\n    const { assertions } = player;\n\n    if (assertions === 0) return \"Ops !!!, You didn't get any questions right\";\n    if (assertions === quantityQuestion) return 'Excellent !!!, Keep it up';\n    if (assertions > Math.ceil(quantityQuestion / 2))\n      return 'Very good !!!, But you can be improved';\n    if (assertions === Math.ceil(quantityQuestion / 2))\n      return 'Good !!!, You are in the average';\n    else return 'Bad !!!, you have a lot to improve';\n  };\n\n  render() {\n    const { player, quantityQuestion } = this.props;\n    const { name, gravatarEmail, score, assertions } = player;\n\n    return (\n      <div className=\"container-feedback\">\n        <h1 style={{ color: 'white', fontSize: '3rem', padding: '2rem 0' }}>\n          Results\n        </h1>\n        <img src={gravatarEmail} alt=\"avatarImage\"></img>\n        <h2>{name}</h2>\n        <p>{this.messageAssertions()}</p>\n        <p>{`Correct Questions:  ${assertions}/${quantityQuestion} - ${\n          (assertions / quantityQuestion) * 100\n        }%`}</p>\n        <h1 className=\"score\">{`${score}  pts`}</h1>\n        <div>\n          <Button title=\"Home\" />\n          <Button title=\"Play Again\" />\n          <Button title=\"Ranking\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  quantityQuestion: state.settings.number,\n});\n\nFeedback.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string,\n  }),\n  quantityQuestion: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}