{"ast":null,"code":"import { getToken, getAsks, getGravatar } from '../services/serviceAPI';\nimport { prepareAnswers } from '../services/prepareAnswers';\nexport const LOGIN = 'LOGIN';\nexport const TOKEN = 'TOKEN';\nexport const SAVE_ASKS = 'SAVE_ASKS';\nexport const UPDATE_PLAYER = 'UPDATE_PLAYER';\nexport const SET_TIME = 'SET_TIME';\nexport const SAVE_INTERVAL = 'SAVE_INTERVAL';\nexport const RESTART_TIME = 'RESTART_TIME';\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\nexport const UPDATE_SETTINGS = 'UPDATE_SETTINGS';\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const RESET_ASKS = 'RESET_ASKS';\nexport const resetSettings = () => ({\n  type: RESET_SETTINGS\n});\nexport const updateSettings = settings => ({\n  type: UPDATE_SETTINGS,\n  settings\n});\nexport const updateStatus = () => ({\n  type: UPDATE_STATUS\n});\nexport const restartTime = () => ({\n  type: RESTART_TIME\n});\nexport const saveInterval = value => ({\n  type: SAVE_INTERVAL,\n  value\n});\nexport const setTime = value => ({\n  type: SET_TIME,\n  value\n});\nexport const saveScore = player => ({\n  type: UPDATE_PLAYER,\n  player\n});\nexport const login = (username, email) => ({\n  type: LOGIN,\n  username,\n  email\n});\nexport const saveAsks = asks => ({\n  type: SAVE_ASKS,\n  asks\n});\nexport const resetAsks = () => ({\n  type: RESET_ASKS\n});\nexport const tokenAction = token => ({\n  type: TOKEN,\n  token\n});\nexport const asyncToken = settings => dispatch => {\n  getToken().then(response => {\n    localStorage.setItem('token', response.token);\n    dispatch(tokenAction(response.token));\n    getAsks(response.token, settings).then(responseAsks => dispatch(saveAsks(prepareAnswers(responseAsks.results))));\n  });\n};\nexport const loginAction = (username, email) => dispatch => {\n  getGravatar(email).then(response => dispatch(login(username, response.url)));\n};","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/actions/index.js"],"names":["getToken","getAsks","getGravatar","prepareAnswers","LOGIN","TOKEN","SAVE_ASKS","UPDATE_PLAYER","SET_TIME","SAVE_INTERVAL","RESTART_TIME","UPDATE_STATUS","UPDATE_SETTINGS","RESET_SETTINGS","RESET_ASKS","resetSettings","type","updateSettings","settings","updateStatus","restartTime","saveInterval","value","setTime","saveScore","player","login","username","email","saveAsks","asks","resetAsks","tokenAction","token","asyncToken","dispatch","then","response","localStorage","setItem","responseAsks","results","loginAction","url"],"mappings":"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","sourcesContent":["import { getToken, getAsks, getGravatar } from '../services/serviceAPI';\nimport { prepareAnswers } from '../services/prepareAnswers';\n\nexport const LOGIN = 'LOGIN';\nexport const TOKEN = 'TOKEN';\nexport const SAVE_ASKS = 'SAVE_ASKS';\nexport const UPDATE_PLAYER = 'UPDATE_PLAYER';\nexport const SET_TIME = 'SET_TIME';\nexport const SAVE_INTERVAL = 'SAVE_INTERVAL';\nexport const RESTART_TIME = 'RESTART_TIME';\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\nexport const UPDATE_SETTINGS = 'UPDATE_SETTINGS';\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const RESET_ASKS = 'RESET_ASKS';\n\nexport const resetSettings = () => ({\n  type: RESET_SETTINGS,\n});\n\nexport const updateSettings = (settings) => ({\n  type: UPDATE_SETTINGS,\n  settings,\n});\n\nexport const updateStatus = () => ({\n  type: UPDATE_STATUS,\n});\n\nexport const restartTime = () => ({\n  type: RESTART_TIME,\n});\n\nexport const saveInterval = (value) => ({\n  type: SAVE_INTERVAL,\n  value,\n});\n\nexport const setTime = (value) => ({\n  type: SET_TIME,\n  value,\n});\n\nexport const saveScore = (player) => ({\n  type: UPDATE_PLAYER,\n  player,\n});\n\nexport const login = (username, email) => ({\n  type: LOGIN,\n  username,\n  email,\n});\n\nexport const saveAsks = (asks) => ({\n  type: SAVE_ASKS,\n  asks,\n});\n\nexport const resetAsks = () => ({\n  type: RESET_ASKS,\n});\n\nexport const tokenAction = (token) => ({\n  type: TOKEN,\n  token,\n});\n\nexport const asyncToken = (settings) => (dispatch) => {\n  getToken().then((response) => {\n    localStorage.setItem('token', response.token);\n    dispatch(tokenAction(response.token));\n    getAsks(response.token, settings).then((responseAsks) =>\n      dispatch(saveAsks(prepareAnswers(responseAsks.results)))\n    );\n  });\n};\n\nexport const loginAction = (username, email) => (dispatch) => {\n  getGravatar(email).then((response) =>\n    dispatch(login(username, response.url))\n  );\n};\n"]},"metadata":{},"sourceType":"module"}