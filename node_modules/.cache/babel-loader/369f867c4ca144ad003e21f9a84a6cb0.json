{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Feedback.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/feedback.css';\nimport { Button } from '../components/Button';\nimport { BsFillTrophyFill, BsPlayFill } from 'react-icons/bs';\nimport { HiHome } from 'react-icons/hi';\nimport { createAsks } from '../actions';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.messageAssertions = () => {\n      const {\n        player,\n        quantityQuestion\n      } = this.props;\n      const {\n        assertions\n      } = player;\n      if (assertions === 0) return \"Ops !!!, You didn't get any questions right\";\n      if (assertions === quantityQuestion) return 'Excellent !!!, Keep it up';\n      if (assertions > Math.ceil(quantityQuestion / 2)) return 'Very good !!!, But you can be improved';\n      if (assertions === Math.ceil(quantityQuestion / 2)) return 'Good !!!, You are in the average';else return 'Bad !!!, you have a lot to improve';\n    };\n\n    this.goFor = pageName => {\n      this.props.history.push(`/${pageName}`);\n    };\n\n    this.playAgain = () => {\n      const {\n        createAsks,\n        settings\n      } = this.props;\n    };\n  }\n\n  render() {\n    const {\n      player,\n      quantityQuestion\n    } = this.props;\n    const {\n      name,\n      gravatarEmail,\n      score,\n      assertions\n    } = player;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        color: 'white',\n        fontSize: '3rem',\n        padding: '2rem 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, \"Results\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: gravatarEmail,\n      alt: \"avatarImage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, this.messageAssertions()), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, `Correct Questions:  ${assertions}/${quantityQuestion} - ${assertions / quantityQuestion * 100}%`), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, `${score}  pts`), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      title: \"Home\",\n      icon: /*#__PURE__*/React.createElement(HiHome, {\n        size: \"1.6rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }\n      }),\n      withBorder: true,\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: () => this.goFor(''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Play Again\",\n      icon: /*#__PURE__*/React.createElement(BsPlayFill, {\n        size: \"1.6rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 19\n        }\n      }),\n      withBorder: true,\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Ranking\",\n      icon: /*#__PURE__*/React.createElement(BsFillTrophyFill, {\n        size: \"1.4rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 19\n        }\n      }),\n      withBorder: true,\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: () => this.goFor('ranking'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  settings: state.settings\n});\n\nconst mapDispatchToProps = dispatch => ({\n  createAsks: settings => dispatch(createAsks(settings))\n});\n\nFeedback.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string\n  }),\n  settings: PropTypes.shape({\n    number: PropTypes.number,\n    category: PropTypes.string,\n    difficulty: PropTypes.string,\n    type: PropTypes.string\n  }),\n  createAsks: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Feedback.js"],"names":["React","connect","PropTypes","Button","BsFillTrophyFill","BsPlayFill","HiHome","createAsks","Feedback","Component","messageAssertions","player","quantityQuestion","props","assertions","Math","ceil","goFor","pageName","history","push","playAgain","settings","render","name","gravatarEmail","score","color","fontSize","padding","mapStateToProps","state","mapDispatchToProps","dispatch","propTypes","shape","string","number","category","difficulty","type","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/feedback.css';\n\nimport { Button } from '../components/Button';\nimport { BsFillTrophyFill, BsPlayFill } from 'react-icons/bs';\nimport { HiHome } from 'react-icons/hi';\nimport { createAsks } from '../actions';\n\nclass Feedback extends React.Component {\n  messageAssertions = () => {\n    const { player, quantityQuestion } = this.props;\n    const { assertions } = player;\n\n    if (assertions === 0) return \"Ops !!!, You didn't get any questions right\";\n    if (assertions === quantityQuestion) return 'Excellent !!!, Keep it up';\n    if (assertions > Math.ceil(quantityQuestion / 2))\n      return 'Very good !!!, But you can be improved';\n    if (assertions === Math.ceil(quantityQuestion / 2))\n      return 'Good !!!, You are in the average';\n    else return 'Bad !!!, you have a lot to improve';\n  };\n\n  goFor = (pageName) => {\n    this.props.history.push(`/${pageName}`);\n  };\n\n  playAgain = () => {\n    const { createAsks, settings } = this.props;\n  };\n\n  render() {\n    const { player, quantityQuestion } = this.props;\n    const { name, gravatarEmail, score, assertions } = player;\n\n    return (\n      <div className=\"container-feedback\">\n        <h1 style={{ color: 'white', fontSize: '3rem', padding: '2rem 0' }}>\n          Results\n        </h1>\n        <img src={gravatarEmail} alt=\"avatarImage\"></img>\n        <h2>{name}</h2>\n        <p>{this.messageAssertions()}</p>\n        <p>{`Correct Questions:  ${assertions}/${quantityQuestion} - ${\n          (assertions / quantityQuestion) * 100\n        }%`}</p>\n        <h1 className=\"score\">{`${score}  pts`}</h1>\n        <div>\n          <Button\n            title=\"Home\"\n            icon={<HiHome size=\"1.6rem\" />}\n            withBorder\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={() => this.goFor('')}\n          />\n          <Button\n            title=\"Play Again\"\n            icon={<BsPlayFill size=\"1.6rem\" />}\n            withBorder\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n          />\n          <Button\n            title=\"Ranking\"\n            icon={<BsFillTrophyFill size=\"1.4rem\" />}\n            withBorder\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={() => this.goFor('ranking')}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  createAsks: (settings) => dispatch(createAsks(settings)),\n});\n\nFeedback.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string,\n  }),\n  settings: PropTypes.shape({\n    number: PropTypes.number,\n    category: PropTypes.string,\n    difficulty: PropTypes.string,\n    type: PropTypes.string,\n  }),\n  createAsks: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}