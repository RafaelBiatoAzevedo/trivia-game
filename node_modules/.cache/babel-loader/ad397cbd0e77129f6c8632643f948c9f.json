{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Feedback.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/feedback.css';\nimport { Button } from '../components/Button';\nimport { BsFillTrophyFill, BsPlayFill } from 'react-icons/bs';\nimport { HiHome } from 'react-icons/hi';\nimport { createAsks, resetAsks, savePlayer } from '../actions';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.messageAssertions = () => {\n      const {\n        player,\n        settings\n      } = this.props;\n      const {\n        assertions\n      } = player;\n      const {\n        number: quantityQuestion\n      } = settings;\n      if (assertions === 0) return \"Ops !!!, You didn't get any questions right\";\n      if (assertions === quantityQuestion) return 'Excellent !!!, Keep it up';\n      if (assertions > Math.ceil(quantityQuestion / 2)) return 'Very good !!!, But you can be improved';\n      if (assertions === Math.ceil(quantityQuestion / 2)) return 'Good !!!, You are in the average';else return 'Bad !!!, you have a lot to improve';\n    };\n\n    this.goFor = pageName => {\n      this.props.history.push(`/${pageName}`);\n    };\n\n    this.playAgain = () => {\n      const {\n        createAsks,\n        settings,\n        savePlayer,\n        player\n      } = this.props;\n      const resetPlayer = { ...player,\n        score: 0,\n        assertions: 0\n      };\n      savePlayer(resetPlayer);\n      createAsks(settings);\n      this.goFor('play');\n    };\n  }\n\n  componentDidMount() {\n    const {\n      clearAsks\n    } = this.props;\n    clearAsks();\n  }\n\n  render() {\n    const {\n      player,\n      settings\n    } = this.props;\n    const {\n      name,\n      gravatarEmail,\n      score,\n      assertions\n    } = player;\n    const {\n      number: quantityQuestion\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        color: 'white',\n        fontSize: '3rem',\n        padding: '2rem 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Results\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: gravatarEmail,\n      alt: \"avatarImage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, this.messageAssertions()), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, `Correct Questions:  ${assertions}/${quantityQuestion} - ${assertions / quantityQuestion * 100}%`), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, `${score}  pts`), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      title: \"Home\",\n      icon: /*#__PURE__*/React.createElement(HiHome, {\n        size: \"1.6rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }\n      }),\n      withBorder: true,\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: () => this.goFor(''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Play Again\",\n      icon: /*#__PURE__*/React.createElement(BsPlayFill, {\n        size: \"1.6rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 19\n        }\n      }),\n      withBorder: true,\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: this.playAgain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Ranking\",\n      icon: /*#__PURE__*/React.createElement(BsFillTrophyFill, {\n        size: \"1.4rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 19\n        }\n      }),\n      withBorder: true,\n      textColor: \"white\",\n      textWeight: \"600\",\n      textSize: \"1.6rem\",\n      onClick: () => this.goFor('ranking'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  player: state.player,\n  settings: state.settings\n});\n\nconst mapDispatchToProps = dispatch => ({\n  createAsks: settings => dispatch(createAsks(settings)),\n  clearAsks: () => dispatch(resetAsks()),\n  savePlayer: player => dispatch(savePlayer(player))\n});\n\nFeedback.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    assertions: PropTypes.number.isRequired,\n    score: PropTypes.number.isRequired,\n    gravatarEmail: PropTypes.string.isRequired\n  }),\n  settings: PropTypes.shape({\n    number: PropTypes.number.isRequired,\n    category: PropTypes.string.isRequired,\n    difficulty: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired\n  }),\n  createAsks: PropTypes.func.isRequired,\n  savePlayer: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Feedback.js"],"names":["React","connect","PropTypes","Button","BsFillTrophyFill","BsPlayFill","HiHome","createAsks","resetAsks","savePlayer","Feedback","Component","messageAssertions","player","settings","props","assertions","number","quantityQuestion","Math","ceil","goFor","pageName","history","push","playAgain","resetPlayer","score","componentDidMount","clearAsks","render","name","gravatarEmail","color","fontSize","padding","mapStateToProps","state","mapDispatchToProps","dispatch","propTypes","shape","string","isRequired","category","difficulty","type","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/feedback.css';\n\nimport { Button } from '../components/Button';\nimport { BsFillTrophyFill, BsPlayFill } from 'react-icons/bs';\nimport { HiHome } from 'react-icons/hi';\nimport { createAsks, resetAsks, savePlayer } from '../actions';\n\nclass Feedback extends React.Component {\n  messageAssertions = () => {\n    const { player, settings } = this.props;\n    const { assertions } = player;\n    const { number: quantityQuestion } = settings;\n\n    if (assertions === 0) return \"Ops !!!, You didn't get any questions right\";\n    if (assertions === quantityQuestion) return 'Excellent !!!, Keep it up';\n    if (assertions > Math.ceil(quantityQuestion / 2))\n      return 'Very good !!!, But you can be improved';\n    if (assertions === Math.ceil(quantityQuestion / 2))\n      return 'Good !!!, You are in the average';\n    else return 'Bad !!!, you have a lot to improve';\n  };\n\n  componentDidMount() {\n    const { clearAsks } = this.props;\n    clearAsks();\n  }\n\n  goFor = (pageName) => {\n    this.props.history.push(`/${pageName}`);\n  };\n\n  playAgain = () => {\n    const { createAsks, settings, savePlayer, player } = this.props;\n    const resetPlayer = { ...player, score: 0, assertions: 0 };\n\n    savePlayer(resetPlayer);\n    createAsks(settings);\n    this.goFor('play');\n  };\n\n  render() {\n    const { player, settings } = this.props;\n    const { name, gravatarEmail, score, assertions } = player;\n    const { number: quantityQuestion } = settings;\n\n    return (\n      <div className=\"container-feedback\">\n        <h1 style={{ color: 'white', fontSize: '3rem', padding: '2rem 0' }}>\n          Results\n        </h1>\n        <img src={gravatarEmail} alt=\"avatarImage\"></img>\n        <h2>{name}</h2>\n        <p>{this.messageAssertions()}</p>\n        <p>{`Correct Questions:  ${assertions}/${quantityQuestion} - ${\n          (assertions / quantityQuestion) * 100\n        }%`}</p>\n        <h1 className=\"score\">{`${score}  pts`}</h1>\n        <div>\n          <Button\n            title=\"Home\"\n            icon={<HiHome size=\"1.6rem\" />}\n            withBorder\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={() => this.goFor('')}\n          />\n          <Button\n            title=\"Play Again\"\n            icon={<BsPlayFill size=\"1.6rem\" />}\n            withBorder\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={this.playAgain}\n          />\n          <Button\n            title=\"Ranking\"\n            icon={<BsFillTrophyFill size=\"1.4rem\" />}\n            withBorder\n            textColor=\"white\"\n            textWeight=\"600\"\n            textSize=\"1.6rem\"\n            onClick={() => this.goFor('ranking')}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  createAsks: (settings) => dispatch(createAsks(settings)),\n  clearAsks: () => dispatch(resetAsks()),\n  savePlayer: (player) => dispatch(savePlayer(player)),\n});\n\nFeedback.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    assertions: PropTypes.number.isRequired,\n    score: PropTypes.number.isRequired,\n    gravatarEmail: PropTypes.string.isRequired,\n  }),\n  settings: PropTypes.shape({\n    number: PropTypes.number.isRequired,\n    category: PropTypes.string.isRequired,\n    difficulty: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n  }),\n  createAsks: PropTypes.func.isRequired,\n  savePlayer: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}