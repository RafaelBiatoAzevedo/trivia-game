{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Play.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { savePlayer, saveInterval, setTime, restartTime, updateStatus } from '../actions';\nimport { addPlayerInRanking } from '../services/localStorage';\nimport { decodeHtml } from '../services/prepareAnswers';\nimport { CgPlayTrackNextO } from 'react-icons/cg';\nimport { GiExitDoor } from 'react-icons/gi';\nimport Timer from '../components/Timer';\nimport Header from '../components/Header';\nimport { Button } from '../components/Button';\nimport '../styles/play.css';\n\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.goFor = pageName => {\n      this.props.history.push(`/${pageName}`);\n    };\n\n    this.state = {\n      answerIndex: 0,\n      answerSelected: false\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.styleAnswer = this.styleAnswer.bind(this);\n    this.answerSelected = this.answerSelected.bind(this);\n    this.setRanking = this.setRanking.bind(this);\n  }\n\n  setRanking() {\n    const player = JSON.parse(localStorage.getItem('@TriviaGame:player'));\n    addPlayerInRanking(player.gravatarEmail, player);\n    this.goFor('feedback');\n  }\n\n  updateScore(answer) {\n    const {\n      asks,\n      timer,\n      player,\n      savePlayer\n    } = this.props;\n    const ask = asks.find(askItem => answer === askItem.correct_answer);\n    const {\n      difficulty\n    } = ask;\n    const valuePattern = 10;\n    const valueDifficulty = difficulty === 'hard' ? 3 : difficulty === 'medium' ? 2 : 1;\n    const scoreAsk = valuePattern + timer.time * valueDifficulty;\n    const updatePlayer = { ...player\n    };\n    updatePlayer.score += scoreAsk;\n    updatePlayer.assertions += 1;\n    localStorage.setItem('@TriviaGame:player', JSON.stringify({ ...updatePlayer\n    }));\n    savePlayer(updatePlayer);\n  }\n\n  styleAnswer(isCorrect) {\n    const {\n      answerSelected\n    } = this.state;\n\n    if (answerSelected) {\n      if (isCorrect) {\n        return {\n          border: '3px solid rgb(6, 240, 15)'\n        };\n      } else {\n        return {\n          border: '3px solid rgb(255, 0, 0)'\n        };\n      }\n    }\n\n    return {\n      border: null\n    };\n  }\n\n  answerSelected(evt) {\n    const {\n      timer\n    } = this.props;\n    const {\n      value\n    } = evt.target;\n    this.setState({\n      answerSelected: true\n    });\n    clearInterval(timer.interval);\n    if (value) this.updateScore(value);\n  }\n\n  nextQuestion() {\n    const {\n      setTimeProp,\n      saveIntervalProp,\n      restartTimeProp\n    } = this.props;\n    const {\n      answerIndex\n    } = this.state;\n    this.setState({\n      answerIndex: answerIndex + 1,\n      answerSelected: false\n    });\n    restartTimeProp();\n    const intervalTime = 1000;\n    const interval = setInterval(() => setTimeProp(1), intervalTime);\n    saveIntervalProp(interval);\n  }\n\n  btnNext() {\n    const {\n      asks\n    } = this.props;\n    const {\n      answerIndex\n    } = this.state;\n    const MAX = asks.length - 1;\n\n    if (answerIndex === MAX) {\n      return /*#__PURE__*/React.createElement(Button, {\n        className: \"button-finish\",\n        icon: /*#__PURE__*/React.createElement(GiExitDoor, {\n          size: \"2.8rem\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }\n        }),\n        title: \"Finish\",\n        textColor: \"#3babc4\",\n        textSize: \"2rem\",\n        type: \"button\",\n        onClick: this.setRanking,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Button, {\n      className: \"button-next\",\n      icon: /*#__PURE__*/React.createElement(CgPlayTrackNextO, {\n        size: \"3rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }\n      }),\n      title: \"Next\",\n      textColor: \"#49a356\",\n      textSize: \"2rem\",\n      type: \"button\",\n      onClick: this.nextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    });\n  }\n\n  renderAnswers(answers) {\n    const {\n      answerIndex,\n      answerSelected\n    } = this.state;\n    const {\n      asks\n    } = this.props;\n    return answers.map(answerElement => {\n      const {\n        answer\n      } = answerElement;\n\n      if (answer === asks[answerIndex].correct_answer) {\n        return /*#__PURE__*/React.createElement(Button, {\n          title: decodeHtml(answer),\n          isBtnAnswer: true,\n          textColor: \"white\",\n          textSize: \"1.6rem\",\n          value: answer,\n          disabled: answerSelected,\n          type: \"button\",\n          style: this.styleAnswer(true),\n          onClick: this.answerSelected,\n          withBorder: true,\n          padding: \"1rem 3rem\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(Button, {\n        title: decodeHtml(answer),\n        isBtnAnswer: true,\n        textSize: \"1.6rem\",\n        textColor: \"white\",\n        value: '',\n        disabled: answerSelected,\n        type: \"button\",\n        style: this.styleAnswer(false),\n        onClick: this.answerSelected,\n        withBorder: true,\n        padding: \"1rem 3rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      });\n    });\n  }\n\n  render() {\n    const {\n      answerIndex,\n      answerSelected\n    } = this.state;\n    const {\n      game,\n      timer,\n      updateStatusProp\n    } = this.props;\n    const {\n      asks\n    } = game;\n    const MAX_QUESTIONS = asks.length - 1;\n\n    if (timer.statusFinishTimer) {\n      this.setState({\n        answerSelected: true\n      });\n      updateStatusProp();\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main-play\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }), asks.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-ask\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, decodeHtml(asks[answerIndex].category)), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, decodeHtml(asks[answerIndex].question)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-answers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, this.renderAnswers(asks[answerIndex].results)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-btn-next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, answerSelected && answerIndex <= MAX_QUESTIONS && this.btnNext()), /*#__PURE__*/React.createElement(Timer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nPlay.propTypes = {\n  game: PropTypes.shape({\n    asks: PropTypes.arrayOf(PropTypes.object),\n    status: PropTypes.bool\n  }),\n  timer: PropTypes.shape({\n    time: PropTypes.number,\n    interval: PropTypes.number,\n    statusFinishTimer: PropTypes.bool\n  }),\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string\n  }),\n  savScore: PropTypes.func,\n  setTimeProp: PropTypes.func,\n  saveIntervalProp: PropTypes.func,\n  restartTimeProp: PropTypes.func\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  game: state.game,\n  timer: state.timer,\n  player: state.player\n});\n\nconst mapDispatchToProps = dispatch => ({\n  savePlayer: player => dispatch(savePlayer(player)),\n  setTimeProp: value => dispatch(setTime(value)),\n  saveIntervalProp: value => dispatch(saveInterval(value)),\n  restartTimeProp: () => dispatch(restartTime()),\n  updateStatusProp: () => dispatch(updateStatus())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Play);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Play.js"],"names":["React","PropTypes","connect","savePlayer","saveInterval","setTime","restartTime","updateStatus","addPlayerInRanking","decodeHtml","CgPlayTrackNextO","GiExitDoor","Timer","Header","Button","Play","Component","constructor","props","goFor","pageName","history","push","state","answerIndex","answerSelected","nextQuestion","bind","styleAnswer","setRanking","player","JSON","parse","localStorage","getItem","gravatarEmail","updateScore","answer","asks","timer","ask","find","askItem","correct_answer","difficulty","valuePattern","valueDifficulty","scoreAsk","time","updatePlayer","score","assertions","setItem","stringify","isCorrect","border","evt","value","target","setState","clearInterval","interval","setTimeProp","saveIntervalProp","restartTimeProp","intervalTime","setInterval","btnNext","MAX","length","renderAnswers","answers","map","answerElement","render","game","updateStatusProp","MAX_QUESTIONS","statusFinishTimer","category","question","results","propTypes","shape","arrayOf","object","status","bool","number","name","string","savScore","func","isRequired","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  savePlayer,\n  saveInterval,\n  setTime,\n  restartTime,\n  updateStatus,\n} from '../actions';\nimport { addPlayerInRanking } from '../services/localStorage';\nimport { decodeHtml } from '../services/prepareAnswers';\nimport { CgPlayTrackNextO } from 'react-icons/cg';\nimport { GiExitDoor } from 'react-icons/gi';\n\nimport Timer from '../components/Timer';\nimport Header from '../components/Header';\nimport { Button } from '../components/Button';\nimport '../styles/play.css';\n\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answerIndex: 0,\n      answerSelected: false,\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.styleAnswer = this.styleAnswer.bind(this);\n    this.answerSelected = this.answerSelected.bind(this);\n    this.setRanking = this.setRanking.bind(this);\n  }\n\n  setRanking() {\n    const player = JSON.parse(localStorage.getItem('@TriviaGame:player'));\n    addPlayerInRanking(player.gravatarEmail, player);\n    this.goFor('feedback');\n  }\n\n  goFor = (pageName) => {\n    this.props.history.push(`/${pageName}`);\n  };\n\n  updateScore(answer) {\n    const { asks, timer, player, savePlayer } = this.props;\n    const ask = asks.find((askItem) => answer === askItem.correct_answer);\n    const { difficulty } = ask;\n    const valuePattern = 10;\n    const valueDifficulty =\n      difficulty === 'hard' ? 3 : difficulty === 'medium' ? 2 : 1;\n    const scoreAsk = valuePattern + timer.time * valueDifficulty;\n\n    const updatePlayer = { ...player };\n\n    updatePlayer.score += scoreAsk;\n    updatePlayer.assertions += 1;\n\n    localStorage.setItem(\n      '@TriviaGame:player',\n      JSON.stringify({ ...updatePlayer })\n    );\n    savePlayer(updatePlayer);\n  }\n\n  styleAnswer(isCorrect) {\n    const { answerSelected } = this.state;\n\n    if (answerSelected) {\n      if (isCorrect) {\n        return { border: '3px solid rgb(6, 240, 15)' };\n      } else {\n        return { border: '3px solid rgb(255, 0, 0)' };\n      }\n    }\n    return { border: null };\n  }\n\n  answerSelected(evt) {\n    const { timer } = this.props;\n    const { value } = evt.target;\n\n    this.setState({ answerSelected: true });\n    clearInterval(timer.interval);\n    if (value) this.updateScore(value);\n  }\n\n  nextQuestion() {\n    const { setTimeProp, saveIntervalProp, restartTimeProp } = this.props;\n    const { answerIndex } = this.state;\n    this.setState({ answerIndex: answerIndex + 1, answerSelected: false });\n    restartTimeProp();\n    const intervalTime = 1000;\n    const interval = setInterval(() => setTimeProp(1), intervalTime);\n    saveIntervalProp(interval);\n  }\n\n  btnNext() {\n    const { asks } = this.props;\n    const { answerIndex } = this.state;\n    const MAX = asks.length - 1;\n\n    if (answerIndex === MAX) {\n      return (\n        <Button\n          className=\"button-finish\"\n          icon={<GiExitDoor size=\"2.8rem\" />}\n          title=\"Finish\"\n          textColor=\"#3babc4\"\n          textSize=\"2rem\"\n          type=\"button\"\n          onClick={this.setRanking}\n        />\n      );\n    }\n    return (\n      <Button\n        className=\"button-next\"\n        icon={<CgPlayTrackNextO size=\"3rem\" />}\n        title=\"Next\"\n        textColor=\"#49a356\"\n        textSize=\"2rem\"\n        type=\"button\"\n        onClick={this.nextQuestion}\n      />\n    );\n  }\n\n  renderAnswers(answers) {\n    const { answerIndex, answerSelected } = this.state;\n    const { asks } = this.props;\n\n    return answers.map((answerElement) => {\n      const { answer } = answerElement;\n\n      if (answer === asks[answerIndex].correct_answer) {\n        return (\n          <Button\n            title={decodeHtml(answer)}\n            isBtnAnswer\n            textColor=\"white\"\n            textSize=\"1.6rem\"\n            value={answer}\n            disabled={answerSelected}\n            type=\"button\"\n            style={this.styleAnswer(true)}\n            onClick={this.answerSelected}\n            withBorder\n            padding=\"1rem 3rem\"\n          />\n        );\n      }\n      return (\n        <Button\n          title={decodeHtml(answer)}\n          isBtnAnswer\n          textSize=\"1.6rem\"\n          textColor=\"white\"\n          value={''}\n          disabled={answerSelected}\n          type=\"button\"\n          style={this.styleAnswer(false)}\n          onClick={this.answerSelected}\n          withBorder\n          padding=\"1rem 3rem\"\n        />\n      );\n    });\n  }\n\n  render() {\n    const { answerIndex, answerSelected } = this.state;\n    const { game, timer, updateStatusProp } = this.props;\n    const { asks } = game;\n    const MAX_QUESTIONS = asks.length - 1;\n\n    if (timer.statusFinishTimer) {\n      this.setState({ answerSelected: true });\n      updateStatusProp();\n    }\n\n    return (\n      <div className=\"container-main-play\">\n        <Header />\n        {asks.length > 0 ? (\n          <div className=\"container-ask\">\n            <h1>{decodeHtml(asks[answerIndex].category)}</h1>\n            <h2>{decodeHtml(asks[answerIndex].question)}</h2>\n            <div className=\"container-answers\">\n              {this.renderAnswers(asks[answerIndex].results)}\n            </div>\n            <div className=\"container-btn-next\">\n              {answerSelected && answerIndex <= MAX_QUESTIONS && this.btnNext()}\n            </div>\n            <Timer />\n          </div>\n        ) : (\n          <div className=\"loader\"></div>\n        )}\n      </div>\n    );\n  }\n}\n\nPlay.propTypes = {\n  game: PropTypes.shape({\n    asks: PropTypes.arrayOf(PropTypes.object),\n    status: PropTypes.bool,\n  }),\n  timer: PropTypes.shape({\n    time: PropTypes.number,\n    interval: PropTypes.number,\n    statusFinishTimer: PropTypes.bool,\n  }),\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string,\n  }),\n  savScore: PropTypes.func,\n  setTimeProp: PropTypes.func,\n  saveIntervalProp: PropTypes.func,\n  restartTimeProp: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  timer: state.timer,\n  player: state.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  savePlayer: (player) => dispatch(savePlayer(player)),\n  setTimeProp: (value) => dispatch(setTime(value)),\n  saveIntervalProp: (value) => dispatch(saveInterval(value)),\n  restartTimeProp: () => dispatch(restartTime()),\n  updateStatusProp: () => dispatch(updateStatus()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Play);\n"]},"metadata":{},"sourceType":"module"}