{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Feedback.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/feedback.css';\nimport { Button } from '../components/Button';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.messageAssertions = () => {\n      const {\n        assertions,\n        quantityQuestion\n      } = this.props;\n      if (assertions === 0) return \"Ops !!!, You didn't get any questions right\";\n      if (assertions === quantityQuestion) return 'Excellent !!!, Keep it up';\n      if (assertions > quantityQuestion / 2) return 'Very good !!!, But you can be improved';\n      if (assertions === quantityQuestion / 2) return 'Good !!!, You are in the average';else return 'Bad !!!, you have a lot to improve';\n    };\n  }\n\n  render() {\n    const {\n      name,\n      score,\n      avatar,\n      assertions,\n      quantityQuestion\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, \"Results\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: avatar,\n      alt: \"avatarImage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, this.messageAssertions()), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, `${assertions}/${quantityQuestion} - ${assertions / quantityQuestion * 100}%`), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, score), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-btns\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      title: \"Play Again\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Ranking\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  name: state.player.name,\n  avatar: state.player.gravatarEmail,\n  score: state.player.score,\n  assertions: state.player.assertions,\n  quantityQuestion: state.settings.number\n});\n\nFeedback.propTypes = {\n  name: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  quantityQuestion: PropTypes.number.isRequired\n};\nexport default connect(mapStateToProps)(Feedback);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Feedback.js"],"names":["React","connect","PropTypes","Button","Feedback","Component","messageAssertions","assertions","quantityQuestion","props","render","name","score","avatar","mapStateToProps","state","player","gravatarEmail","settings","number","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/feedback.css';\n\nimport { Button } from '../components/Button';\n\nclass Feedback extends React.Component {\n  messageAssertions = () => {\n    const { assertions, quantityQuestion } = this.props;\n\n    if (assertions === 0) return \"Ops !!!, You didn't get any questions right\";\n    if (assertions === quantityQuestion) return 'Excellent !!!, Keep it up';\n    if (assertions > quantityQuestion / 2)\n      return 'Very good !!!, But you can be improved';\n    if (assertions === quantityQuestion / 2)\n      return 'Good !!!, You are in the average';\n    else return 'Bad !!!, you have a lot to improve';\n  };\n\n  render() {\n    const { name, score, avatar, assertions, quantityQuestion } = this.props;\n\n    return (\n      <div className=\"container-feedback\">\n        <h1>Results</h1>\n        <img src={avatar} alt=\"avatarImage\"></img>\n        <h2>{name}</h2>\n        <p>{this.messageAssertions()}</p>\n        <p>{`${assertions}/${quantityQuestion} - ${\n          (assertions / quantityQuestion) * 100\n        }%`}</p>\n        <h2>{score}</h2>\n        <div className=\"container-btns\">\n          <Button title=\"Play Again\"></Button>\n          <Button title=\"Ranking\"></Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  avatar: state.player.gravatarEmail,\n  score: state.player.score,\n  assertions: state.player.assertions,\n  quantityQuestion: state.settings.number,\n});\n\nFeedback.propTypes = {\n  name: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  quantityQuestion: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}