{"ast":null,"code":"var _jsxFileName = \"/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Settings.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\nimport { updateSettings } from '../actions';\nimport { getCategories } from '../serviceAPI';\nimport '../styles/settings.css';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = this.initialState.bind(this);\n    this.state = {\n      categories: [],\n      settings: {}\n    };\n  }\n\n  componentDidMount() {\n    this.initialState();\n  }\n\n  initialState() {\n    const {\n      settings\n    } = this.props;\n    this.setState({\n      settings\n    });\n    getCategories().then(categories => this.setState({\n      categories\n    }));\n  }\n\n  updateSettings(evt) {\n    const {\n      name,\n      value\n    } = evt.target;\n    this.setState(state => ({ ...state,\n      settings: { ...state.settings,\n        [`${name}`]: value\n      }\n    }));\n  }\n\n  renderInputNumber() {\n    const {\n      settings\n    } = this.state;\n    const {\n      number\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputNumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, \"Number Questions\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"inputNumber\",\n      onChange: evt => this.updateSettings(evt),\n      name: \"number\",\n      value: number,\n      className: \"inputs inputNumber\",\n      type: \"number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  renderSelectCategory() {\n    const {\n      settings,\n      categories\n    } = this.state;\n    const {\n      category\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputCategory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, \"Category\", /*#__PURE__*/React.createElement(\"select\", {\n      id: \"inputCategory\",\n      onChange: evt => this.updateSettings(evt),\n      name: \"category\",\n      value: category,\n      className: \"inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"All\"), categories.map(categoryItem => /*#__PURE__*/React.createElement(\"option\", {\n      key: categoryItem.id,\n      value: categoryItem.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, categoryItem.name))));\n  }\n\n  renderSelectDifficulty() {\n    const {\n      settings\n    } = this.state;\n    const {\n      difficulty\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputDifficulty\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, \"Difficulty\", /*#__PURE__*/React.createElement(\"select\", {\n      id: \"inputDifficulty\",\n      onChange: evt => this.updateSettings(evt),\n      name: \"difficulty\",\n      value: difficulty,\n      className: \"inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \"All\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"easy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, \"Easy\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"hard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, \"Hard\")));\n  }\n\n  renderSelectType() {\n    const {\n      settings\n    } = this.state;\n    const {\n      type\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-inputs\",\n      htmlFor: \"inputType\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, \"Type\", /*#__PURE__*/React.createElement(\"select\", {\n      id: \"inputType\",\n      onChange: evt => this.updateSettings(evt),\n      name: \"type\",\n      value: type,\n      className: \"inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, \"All\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"multiple\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, \"Multiple Choice\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"boolean\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, \"True or False\")));\n  }\n\n  renderBtn() {\n    const {\n      saveSettings\n    } = this.props;\n    const {\n      settings\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Link, {\n      className: \"link-btn\",\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => saveSettings(settings),\n      className: \"btn-addSettings\",\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, \"Add Settings\"));\n  }\n\n  render() {\n    const {\n      settings\n    } = this.state;\n    const {\n      number\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main-play\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        color: 'white',\n        fontSize: '3rem',\n        padding: '2rem 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, \"Settings\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"inputNumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, \"Number Questions\"), /*#__PURE__*/React.createElement(Input, {\n      width: \"30rem\",\n      textSize: \"1.6rem\",\n      type: \"number\",\n      name: \"inputNumber\",\n      value: number,\n      onChange: evt => this.updateSettings(evt),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }), this.renderSelectCategory(), this.renderSelectDifficulty(), this.renderSelectType(), /*#__PURE__*/React.createElement(Button, {\n      title: \"Save settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      title: \"Reset default\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nSettings.propTypes = {\n  settings: PropTypes.objectOf(),\n  saveSettings: PropTypes.func\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  settings: state.settings\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveSettings: value => dispatch(updateSettings(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/pages/Settings.js"],"names":["React","connect","Link","PropTypes","Button","Input","updateSettings","getCategories","Settings","Component","constructor","props","initialState","bind","state","categories","settings","componentDidMount","setState","then","evt","name","value","target","renderInputNumber","number","renderSelectCategory","category","map","categoryItem","id","renderSelectDifficulty","difficulty","renderSelectType","type","renderBtn","saveSettings","render","color","fontSize","padding","propTypes","objectOf","func","isRequired","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '../components/Button';\nimport { Input } from '../components/Input';\nimport { updateSettings } from '../actions';\nimport { getCategories } from '../serviceAPI';\nimport '../styles/settings.css';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = this.initialState.bind(this);\n    this.state = {\n      categories: [],\n      settings: {},\n    };\n  }\n\n  componentDidMount() {\n    this.initialState();\n  }\n\n  initialState() {\n    const { settings } = this.props;\n    this.setState({ settings });\n    getCategories().then((categories) => this.setState({ categories }));\n  }\n\n  updateSettings(evt) {\n    const { name, value } = evt.target;\n    this.setState((state) => ({\n      ...state,\n      settings: { ...state.settings, [`${name}`]: value },\n    }));\n  }\n\n  renderInputNumber() {\n    const { settings } = this.state;\n    const { number } = settings;\n    return (\n      <label className=\"label-inputs\" htmlFor=\"inputNumber\">\n        Number Questions\n        <input\n          id=\"inputNumber\"\n          onChange={(evt) => this.updateSettings(evt)}\n          name=\"number\"\n          value={number}\n          className=\"inputs inputNumber\"\n          type=\"number\"\n        />\n      </label>\n    );\n  }\n\n  renderSelectCategory() {\n    const { settings, categories } = this.state;\n    const { category } = settings;\n    return (\n      <label className=\"label-inputs\" htmlFor=\"inputCategory\">\n        Category\n        <select\n          id=\"inputCategory\"\n          onChange={(evt) => this.updateSettings(evt)}\n          name=\"category\"\n          value={category}\n          className=\"inputs\"\n        >\n          <option>All</option>\n          {categories.map((categoryItem) => (\n            <option key={categoryItem.id} value={categoryItem.id}>\n              {categoryItem.name}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  renderSelectDifficulty() {\n    const { settings } = this.state;\n    const { difficulty } = settings;\n    return (\n      <label className=\"label-inputs\" htmlFor=\"inputDifficulty\">\n        Difficulty\n        <select\n          id=\"inputDifficulty\"\n          onChange={(evt) => this.updateSettings(evt)}\n          name=\"difficulty\"\n          value={difficulty}\n          className=\"inputs\"\n        >\n          <option>All</option>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderSelectType() {\n    const { settings } = this.state;\n    const { type } = settings;\n    return (\n      <label className=\"label-inputs\" htmlFor=\"inputType\">\n        Type\n        <select\n          id=\"inputType\"\n          onChange={(evt) => this.updateSettings(evt)}\n          name=\"type\"\n          value={type}\n          className=\"inputs\"\n        >\n          <option>All</option>\n          <option value=\"multiple\">Multiple Choice</option>\n          <option value=\"boolean\">True or False</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderBtn() {\n    const { saveSettings } = this.props;\n    const { settings } = this.state;\n    return (\n      <Link className=\"link-btn\" to=\"/\">\n        <button\n          onClick={() => saveSettings(settings)}\n          className=\"btn-addSettings\"\n          type=\"button\"\n        >\n          Add Settings\n        </button>\n      </Link>\n    );\n  }\n\n  render() {\n    const { settings } = this.state;\n    const { number } = settings;\n\n    return (\n      <div className=\"container-main-play\">\n        <h1 style={{ color: 'white', fontSize: '3rem', padding: '2rem 0' }}>\n          Settings\n        </h1>\n        <label htmlFor=\"inputNumber\">Number Questions</label>\n        <Input\n          width=\"30rem\"\n          textSize=\"1.6rem\"\n          type=\"number\"\n          name=\"inputNumber\"\n          value={number}\n          onChange={(evt) => this.updateSettings(evt)}\n        ></Input>\n        {this.renderSelectCategory()}\n        {this.renderSelectDifficulty()}\n        {this.renderSelectType()}\n        <Button title=\"Save settings\"></Button>\n        <Button title=\"Reset default\"></Button>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  settings: PropTypes.objectOf(),\n  saveSettings: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveSettings: (value) => dispatch(updateSettings(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n"]},"metadata":{},"sourceType":"module"}