{"ast":null,"code":"import { getToken, getAsks } from '../services/serviceAPI';\nimport { prepareAnswers } from '../services/prepareAnswers';\nexport const SAVE_TOKEN = 'SAVE_TOKEN';\nexport const SAVE_ASKS = 'SAVE_ASKS';\nexport const SAVE_PLAYER = 'SAVE_PLAYER';\nexport const SET_TIME = 'SET_TIME';\nexport const SAVE_INTERVAL = 'SAVE_INTERVAL';\nexport const RESTART_TIME = 'RESTART_TIME';\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\nexport const UPDATE_SETTINGS = 'UPDATE_SETTINGS';\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const RESET_GAME = 'RESET_GAME';\nexport const TOGGLE_STATUS_GAME = 'TOGGLE_STATUS_GAME';\nexport const resetSettings = () => ({\n  type: RESET_SETTINGS\n});\nexport const updateSettings = settings => ({\n  type: UPDATE_SETTINGS,\n  settings\n});\nexport const updateStatus = () => ({\n  type: UPDATE_STATUS\n});\nexport const restartTime = () => ({\n  type: RESTART_TIME\n});\nexport const saveInterval = value => ({\n  type: SAVE_INTERVAL,\n  value\n});\nexport const setTime = value => ({\n  type: SET_TIME,\n  value\n});\nexport const savePlayerAction = player => ({\n  type: SAVE_PLAYER,\n  player\n});\nexport const saveAsks = asks => ({\n  type: SAVE_ASKS,\n  asks\n});\nexport const resetAsks = () => ({\n  type: RESET_GAME\n});\nexport const saveToken = token => ({\n  type: SAVE_TOKEN,\n  token\n});\nexport const savePlayer = player => dispatch => {\n  localStorage.setItem('@TriviaGame:player', JSON.stringify(player));\n  dispatch(savePlayerAction(player));\n};\nexport const createAsks = settings => dispatch => {\n  getToken().then(response => {\n    localStorage.setItem('@TriviaGame:token', response.token);\n    dispatch(saveToken(response.token));\n    getAsks(response.token, settings).then(responseAsks => dispatch(saveAsks(prepareAnswers(responseAsks.results))));\n  });\n};","map":{"version":3,"sources":["/home/rafa/Documentos/Programming/My Projects/Front-End/trivia-game/src/actions/index.js"],"names":["getToken","getAsks","prepareAnswers","SAVE_TOKEN","SAVE_ASKS","SAVE_PLAYER","SET_TIME","SAVE_INTERVAL","RESTART_TIME","UPDATE_STATUS","UPDATE_SETTINGS","RESET_SETTINGS","RESET_GAME","TOGGLE_STATUS_GAME","resetSettings","type","updateSettings","settings","updateStatus","restartTime","saveInterval","value","setTime","savePlayerAction","player","saveAsks","asks","resetAsks","saveToken","token","savePlayer","dispatch","localStorage","setItem","JSON","stringify","createAsks","then","response","responseAsks","results"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,wBAAlC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,aAAa,GAAG,OAAO;AAClCC,EAAAA,IAAI,EAAEJ;AAD4B,CAAP,CAAtB;AAIP,OAAO,MAAMK,cAAc,GAAIC,QAAD,KAAe;AAC3CF,EAAAA,IAAI,EAAEL,eADqC;AAE3CO,EAAAA;AAF2C,CAAf,CAAvB;AAKP,OAAO,MAAMC,YAAY,GAAG,OAAO;AACjCH,EAAAA,IAAI,EAAEN;AAD2B,CAAP,CAArB;AAIP,OAAO,MAAMU,WAAW,GAAG,OAAO;AAChCJ,EAAAA,IAAI,EAAEP;AAD0B,CAAP,CAApB;AAIP,OAAO,MAAMY,YAAY,GAAIC,KAAD,KAAY;AACtCN,EAAAA,IAAI,EAAER,aADgC;AAEtCc,EAAAA;AAFsC,CAAZ,CAArB;AAKP,OAAO,MAAMC,OAAO,GAAID,KAAD,KAAY;AACjCN,EAAAA,IAAI,EAAET,QAD2B;AAEjCe,EAAAA;AAFiC,CAAZ,CAAhB;AAKP,OAAO,MAAME,gBAAgB,GAAIC,MAAD,KAAa;AAC3CT,EAAAA,IAAI,EAAEV,WADqC;AAE3CmB,EAAAA;AAF2C,CAAb,CAAzB;AAKP,OAAO,MAAMC,QAAQ,GAAIC,IAAD,KAAW;AACjCX,EAAAA,IAAI,EAAEX,SAD2B;AAEjCsB,EAAAA;AAFiC,CAAX,CAAjB;AAKP,OAAO,MAAMC,SAAS,GAAG,OAAO;AAC9BZ,EAAAA,IAAI,EAAEH;AADwB,CAAP,CAAlB;AAIP,OAAO,MAAMgB,SAAS,GAAIC,KAAD,KAAY;AACnCd,EAAAA,IAAI,EAAEZ,UAD6B;AAEnC0B,EAAAA;AAFmC,CAAZ,CAAlB;AAKP,OAAO,MAAMC,UAAU,GAAIN,MAAD,IAAaO,QAAD,IAAc;AAClDC,EAAAA,YAAY,CAACC,OAAb,CAAqB,oBAArB,EAA2CC,IAAI,CAACC,SAAL,CAAeX,MAAf,CAA3C;AACAO,EAAAA,QAAQ,CAACR,gBAAgB,CAACC,MAAD,CAAjB,CAAR;AACD,CAHM;AAKP,OAAO,MAAMY,UAAU,GAAInB,QAAD,IAAec,QAAD,IAAc;AACpD/B,EAAAA,QAAQ,GAAGqC,IAAX,CAAiBC,QAAD,IAAc;AAC5BN,IAAAA,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0CK,QAAQ,CAACT,KAAnD;AACAE,IAAAA,QAAQ,CAACH,SAAS,CAACU,QAAQ,CAACT,KAAV,CAAV,CAAR;AACA5B,IAAAA,OAAO,CAACqC,QAAQ,CAACT,KAAV,EAAiBZ,QAAjB,CAAP,CAAkCoB,IAAlC,CAAwCE,YAAD,IACrCR,QAAQ,CAACN,QAAQ,CAACvB,cAAc,CAACqC,YAAY,CAACC,OAAd,CAAf,CAAT,CADV;AAGD,GAND;AAOD,CARM","sourcesContent":["import { getToken, getAsks } from '../services/serviceAPI';\nimport { prepareAnswers } from '../services/prepareAnswers';\n\nexport const SAVE_TOKEN = 'SAVE_TOKEN';\nexport const SAVE_ASKS = 'SAVE_ASKS';\nexport const SAVE_PLAYER = 'SAVE_PLAYER';\nexport const SET_TIME = 'SET_TIME';\nexport const SAVE_INTERVAL = 'SAVE_INTERVAL';\nexport const RESTART_TIME = 'RESTART_TIME';\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\nexport const UPDATE_SETTINGS = 'UPDATE_SETTINGS';\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const RESET_GAME = 'RESET_GAME';\nexport const TOGGLE_STATUS_GAME = 'TOGGLE_STATUS_GAME';\n\nexport const resetSettings = () => ({\n  type: RESET_SETTINGS,\n});\n\nexport const updateSettings = (settings) => ({\n  type: UPDATE_SETTINGS,\n  settings,\n});\n\nexport const updateStatus = () => ({\n  type: UPDATE_STATUS,\n});\n\nexport const restartTime = () => ({\n  type: RESTART_TIME,\n});\n\nexport const saveInterval = (value) => ({\n  type: SAVE_INTERVAL,\n  value,\n});\n\nexport const setTime = (value) => ({\n  type: SET_TIME,\n  value,\n});\n\nexport const savePlayerAction = (player) => ({\n  type: SAVE_PLAYER,\n  player,\n});\n\nexport const saveAsks = (asks) => ({\n  type: SAVE_ASKS,\n  asks,\n});\n\nexport const resetAsks = () => ({\n  type: RESET_GAME,\n});\n\nexport const saveToken = (token) => ({\n  type: SAVE_TOKEN,\n  token,\n});\n\nexport const savePlayer = (player) => (dispatch) => {\n  localStorage.setItem('@TriviaGame:player', JSON.stringify(player));\n  dispatch(savePlayerAction(player));\n};\n\nexport const createAsks = (settings) => (dispatch) => {\n  getToken().then((response) => {\n    localStorage.setItem('@TriviaGame:token', response.token);\n    dispatch(saveToken(response.token));\n    getAsks(response.token, settings).then((responseAsks) =>\n      dispatch(saveAsks(prepareAnswers(responseAsks.results)))\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module"}